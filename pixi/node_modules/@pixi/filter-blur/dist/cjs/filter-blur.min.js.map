{"version":3,"file":"filter-blur.min.js","sources":["../../src/generateBlurVertSource.ts","../../src/generateBlurFragSource.ts","../../src/BlurFilterPass.ts","../../src/BlurFilter.ts"],"sourcesContent":["const vertTemplate = `\n    attribute vec2 aVertexPosition;\n\n    uniform mat3 projectionMatrix;\n\n    uniform float strength;\n\n    varying vec2 vBlurTexCoords[%size%];\n\n    uniform vec4 inputSize;\n    uniform vec4 outputFrame;\n\n    vec4 filterVertexPosition( void )\n    {\n        vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n        return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n    }\n\n    vec2 filterTextureCoord( void )\n    {\n        return aVertexPosition * (outputFrame.zw * inputSize.zw);\n    }\n\n    void main(void)\n    {\n        gl_Position = filterVertexPosition();\n\n        vec2 textureCoord = filterTextureCoord();\n        %blur%\n    }`;\n\nexport function generateBlurVertSource(kernelSize: number, x: boolean): string\n{\n    const halfLength = Math.ceil(kernelSize / 2);\n\n    let vertSource = vertTemplate;\n\n    let blurLoop = '';\n    let template;\n\n    if (x)\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(%sampleIndex% * strength, 0.0);';\n    }\n    else\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(0.0, %sampleIndex% * strength);';\n    }\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i.toString());\n\n        blur = blur.replace('%sampleIndex%', `${i - (halfLength - 1)}.0`);\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    vertSource = vertSource.replace('%blur%', blurLoop);\n    vertSource = vertSource.replace('%size%', kernelSize.toString());\n\n    return vertSource;\n}\n","interface IGAUSSIAN_VALUES\n{\n    [x: number]: number[];\n}\nconst GAUSSIAN_VALUES: IGAUSSIAN_VALUES = {\n    5: [0.153388, 0.221461, 0.250301],\n    7: [0.071303, 0.131514, 0.189879, 0.214607],\n    9: [0.028532, 0.067234, 0.124009, 0.179044, 0.20236],\n    11: [0.0093, 0.028002, 0.065984, 0.121703, 0.175713, 0.198596],\n    13: [0.002406, 0.009255, 0.027867, 0.065666, 0.121117, 0.174868, 0.197641],\n    15: [0.000489, 0.002403, 0.009246, 0.02784, 0.065602, 0.120999, 0.174697, 0.197448],\n};\n\nconst fragTemplate = [\n    'varying vec2 vBlurTexCoords[%size%];',\n    'uniform sampler2D uSampler;',\n\n    'void main(void)',\n    '{',\n    '    gl_FragColor = vec4(0.0);',\n    '    %blur%',\n    '}',\n\n].join('\\n');\n\nexport function generateBlurFragSource(kernelSize: number): string\n{\n    const kernel = GAUSSIAN_VALUES[kernelSize];\n    const halfLength = kernel.length;\n\n    let fragSource = fragTemplate;\n\n    let blurLoop = '';\n    const template = 'gl_FragColor += texture2D(uSampler, vBlurTexCoords[%index%]) * %value%;';\n    let value: number;\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i.toString());\n\n        value = i;\n\n        if (i >= halfLength)\n        {\n            value = kernelSize - i - 1;\n        }\n\n        blur = blur.replace('%value%', kernel[value].toString());\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    fragSource = fragSource.replace('%blur%', blurLoop);\n    fragSource = fragSource.replace('%size%', kernelSize.toString());\n\n    return fragSource;\n}\n","import { Filter, settings, CLEAR_MODES } from '@pixi/core';\nimport { generateBlurVertSource } from './generateBlurVertSource';\nimport { generateBlurFragSource } from './generateBlurFragSource';\n\nimport type { FilterSystem, RenderTexture } from '@pixi/core';\n\n/**\n * The BlurFilterPass applies a horizontal or vertical Gaussian blur to an object.\n * @memberof PIXI.filters\n */\nexport class BlurFilterPass extends Filter\n{\n    public horizontal: boolean;\n    public strength: number;\n    public passes: number;\n\n    private _quality: number;\n\n    /**\n     * @param horizontal - Do pass along the x-axis (`true`) or y-axis (`false`).\n     * @param strength - The strength of the blur filter.\n     * @param quality - The quality of the blur filter.\n     * @param resolution - The resolution of the blur filter.\n     * @param kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(horizontal: boolean, strength = 8, quality = 4, resolution = settings.FILTER_RESOLUTION, kernelSize = 5)\n    {\n        const vertSrc = generateBlurVertSource(kernelSize, horizontal);\n        const fragSrc = generateBlurFragSource(kernelSize);\n\n        super(\n            // vertex shader\n            vertSrc,\n            // fragment shader\n            fragSrc\n        );\n\n        this.horizontal = horizontal;\n\n        this.resolution = resolution;\n\n        this._quality = 0;\n\n        this.quality = quality;\n\n        this.blur = strength;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - How to clear\n     */\n    public apply(\n        filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES\n    ): void\n    {\n        if (output)\n        {\n            if (this.horizontal)\n            {\n                this.uniforms.strength = (1 / output.width) * (output.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / output.height) * (output.height / input.height);\n            }\n        }\n        else\n        {\n            if (this.horizontal) // eslint-disable-line\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.width) * (filterManager.renderer.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.height) * (filterManager.renderer.height / input.height); // eslint-disable-line\n            }\n        }\n\n        // screen space!\n        this.uniforms.strength *= this.strength;\n        this.uniforms.strength /= this.passes;\n\n        if (this.passes === 1)\n        {\n            filterManager.applyFilter(this, input, output, clearMode);\n        }\n        else\n        {\n            const renderTarget = filterManager.getFilterTexture();\n            const renderer = filterManager.renderer;\n\n            let flip = input;\n            let flop = renderTarget;\n\n            this.state.blend = false;\n            filterManager.applyFilter(this, flip, flop, CLEAR_MODES.CLEAR);\n\n            for (let i = 1; i < this.passes - 1; i++)\n            {\n                filterManager.bindAndClear(flip, CLEAR_MODES.BLIT);\n\n                this.uniforms.uSampler = flop;\n\n                const temp = flop;\n\n                flop = flip;\n                flip = temp;\n\n                renderer.shader.bind(this);\n                renderer.geometry.draw(5);\n            }\n\n            this.state.blend = true;\n            filterManager.applyFilter(this, flop, output, clearMode);\n            filterManager.returnFilterTexture(renderTarget);\n        }\n    }\n    /**\n     * Sets the strength of both the blur.\n     * @default 16\n     */\n    get blur(): number\n    {\n        return this.strength;\n    }\n\n    set blur(value: number)\n    {\n        this.padding = 1 + (Math.abs(value) * 2);\n        this.strength = value;\n    }\n\n    /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quality bluring but the lower the performance.\n     * @default 4\n     */\n    get quality(): number\n    {\n        return this._quality;\n    }\n\n    set quality(value: number)\n    {\n        this._quality = value;\n        this.passes = value;\n    }\n}\n","import { Filter, settings, CLEAR_MODES } from '@pixi/core';\nimport { BlurFilterPass } from './BlurFilterPass';\n\nimport type { BLEND_MODES, FilterSystem, RenderTexture } from '@pixi/core';\n\n/**\n * The BlurFilter applies a Gaussian blur to an object.\n *\n * The strength of the blur can be set for the x-axis and y-axis separately.\n * @memberof PIXI.filters\n */\nexport class BlurFilter extends Filter\n{\n    public blurXFilter: BlurFilterPass;\n    public blurYFilter: BlurFilterPass;\n\n    private _repeatEdgePixels: boolean;\n\n    /**\n     * @param strength - The strength of the blur filter.\n     * @param quality - The quality of the blur filter.\n     * @param [resolution=PIXI.settings.FILTER_RESOLUTION] - The resolution of the blur filter.\n     * @param kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(strength = 8, quality = 4, resolution = settings.FILTER_RESOLUTION, kernelSize = 5)\n    {\n        super();\n\n        this.blurXFilter = new BlurFilterPass(true, strength, quality, resolution, kernelSize);\n        this.blurYFilter = new BlurFilterPass(false, strength, quality, resolution, kernelSize);\n\n        this.resolution = resolution;\n        this.quality = quality;\n        this.blur = strength;\n\n        this.repeatEdgePixels = false;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - How to clear\n     */\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES): void\n    {\n        const xStrength = Math.abs(this.blurXFilter.strength);\n        const yStrength = Math.abs(this.blurYFilter.strength);\n\n        if (xStrength && yStrength)\n        {\n            const renderTarget = filterManager.getFilterTexture();\n\n            this.blurXFilter.apply(filterManager, input, renderTarget, CLEAR_MODES.CLEAR);\n            this.blurYFilter.apply(filterManager, renderTarget, output, clearMode);\n\n            filterManager.returnFilterTexture(renderTarget);\n        }\n        else if (yStrength)\n        {\n            this.blurYFilter.apply(filterManager, input, output, clearMode);\n        }\n        else\n        {\n            this.blurXFilter.apply(filterManager, input, output, clearMode);\n        }\n    }\n\n    protected updatePadding(): void\n    {\n        if (this._repeatEdgePixels)\n        {\n            this.padding = 0;\n        }\n        else\n        {\n            this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n        }\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     * @default 2\n     */\n    get blur(): number\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blur(value: number)\n    {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the number of passes for blur. More passes means higher quality bluring.\n     * @default 1\n     */\n    get quality(): number\n    {\n        return this.blurXFilter.quality;\n    }\n\n    set quality(value: number)\n    {\n        this.blurXFilter.quality = this.blurYFilter.quality = value;\n    }\n\n    /**\n     * Sets the strength of the blurX property\n     * @default 2\n     */\n    get blurX(): number\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blurX(value: number)\n    {\n        this.blurXFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the strength of the blurY property\n     * @default 2\n     */\n    get blurY(): number\n    {\n        return this.blurYFilter.blur;\n    }\n\n    set blurY(value: number)\n    {\n        this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the blendmode of the filter\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this.blurYFilter.blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blurYFilter.blendMode = value;\n    }\n\n    /**\n     * If set to true the edge of the target will be clamped\n     * @default false\n     */\n    get repeatEdgePixels(): boolean\n    {\n        return this._repeatEdgePixels;\n    }\n\n    set repeatEdgePixels(value: boolean)\n    {\n        this._repeatEdgePixels = value;\n        this.updatePadding();\n    }\n}\n"],"names":["d","b","p","g","m","h","u","a"],"mappings":"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"}