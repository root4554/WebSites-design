{"version":3,"file":"math.js","sources":["../../src/const.ts","../../src/Point.ts","../../src/shapes/Rectangle.ts","../../src/shapes/Circle.ts","../../src/shapes/Ellipse.ts","../../src/shapes/Polygon.ts","../../src/shapes/RoundedRectangle.ts","../../src/ObservablePoint.ts","../../src/Matrix.ts","../../src/groupD8.ts","../../src/Transform.ts"],"sourcesContent":["/**\n * Two Pi.\n * @static\n * @member {number}\n * @memberof PIXI\n */\nexport const PI_2 = Math.PI * 2;\n\n/**\n * Conversion factor for converting radians to degrees.\n * @static\n * @member {number} RAD_TO_DEG\n * @memberof PIXI\n */\nexport const RAD_TO_DEG = 180 / Math.PI;\n\n/**\n * Conversion factor for converting degrees to radians.\n * @static\n * @member {number}\n * @memberof PIXI\n */\nexport const DEG_TO_RAD = Math.PI / 180;\n\n/**\n * Constants that identify shapes, mainly to prevent `instanceof` calls.\n * @static\n * @memberof PIXI\n * @enum {number}\n * @property {number} POLY Polygon\n * @property {number} RECT Rectangle\n * @property {number} CIRC Circle\n * @property {number} ELIP Ellipse\n * @property {number} RREC Rounded Rectangle\n */\nexport enum SHAPES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    POLY = 0,\n    RECT = 1,\n    CIRC = 2,\n    ELIP = 3,\n    RREC = 4,\n}\n","import type { IPoint } from './IPoint';\nimport type { IPointData } from './IPointData';\n\nexport interface Point extends GlobalMixins.Point, IPoint {}\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis\n * @class\n * @memberof PIXI\n * @implements {IPoint}\n */\nexport class Point implements IPoint\n{\n    /** Position of the point on the x axis */\n    public x = 0;\n    /** Position of the point on the y axis */\n    public y = 0;\n\n    /**\n     * Creates a new `Point`\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(x = 0, y = 0)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Creates a clone of this point\n     * @returns A clone of this point\n     */\n    clone(): Point\n    {\n        return new Point(this.x, this.y);\n    }\n\n    /**\n     * Copies `x` and `y` from the given point into this point\n     * @param p - The point to copy from\n     * @returns The point instance itself\n     */\n    copyFrom(p: IPointData): this\n    {\n        this.set(p.x, p.y);\n\n        return this;\n    }\n\n    /**\n     * Copies this point's x and y into the given point (`p`).\n     * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n     * @returns The point (`p`) with values updated\n     */\n    copyTo<T extends IPoint>(p: T): T\n    {\n        p.set(this.x, this.y);\n\n        return p;\n    }\n\n    /**\n     * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n     * @param p - The point to check\n     * @returns Returns `true` if both `x` and `y` are equal\n     */\n    equals(p: IPointData): boolean\n    {\n        return (p.x === this.x) && (p.y === this.y);\n    }\n\n    /**\n     * Sets the point to a new `x` and `y` position.\n     * If `y` is omitted, both `x` and `y` will be set to `x`.\n     * @param {number} [x=0] - position of the point on the `x` axis\n     * @param {number} [y=x] - position of the point on the `y` axis\n     * @returns The point instance itself\n     */\n    set(x = 0, y = x): this\n    {\n        this.x = x;\n        this.y = y;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Point x=${this.x} y=${this.y}]`;\n    }\n    // #endif\n}\n","import { SHAPES } from '../const';\nimport type { Matrix } from '../Matrix';\nimport { Point } from '../Point';\n\nconst tempPoints = [new Point(), new Point(), new Point(), new Point()];\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Rectangle extends GlobalMixins.Rectangle {}\n\n/**\n * Size object, contains width and height\n * @memberof PIXI\n * @typedef {object} ISize\n * @property {number} width - Width component\n * @property {number} height - Height component\n */\n\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n * @memberof PIXI\n */\nexport class Rectangle\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.RECT\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.RECT;\n\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rectangle\n     * @param width - The overall width of the rectangle\n     * @param height - The overall height of the rectangle\n     */\n    constructor(x: string | number = 0, y: string | number = 0, width: string | number = 0, height: string | number = 0)\n    {\n        this.x = Number(x);\n        this.y = Number(y);\n        this.width = Number(width);\n        this.height = Number(height);\n        this.type = SHAPES.RECT;\n    }\n\n    /** Returns the left edge of the rectangle. */\n    get left(): number\n    {\n        return this.x;\n    }\n\n    /** Returns the right edge of the rectangle. */\n    get right(): number\n    {\n        return this.x + this.width;\n    }\n\n    /** Returns the top edge of the rectangle. */\n    get top(): number\n    {\n        return this.y;\n    }\n\n    /** Returns the bottom edge of the rectangle. */\n    get bottom(): number\n    {\n        return this.y + this.height;\n    }\n\n    /** A constant empty rectangle. */\n    static get EMPTY(): Rectangle\n    {\n        return new Rectangle(0, 0, 0, 0);\n    }\n\n    /**\n     * Creates a clone of this Rectangle\n     * @returns a copy of the rectangle\n     */\n    clone(): Rectangle\n    {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     * @param rectangle - The rectangle to copy from.\n     * @returns Returns itself.\n     */\n    copyFrom(rectangle: Rectangle): Rectangle\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Copies this rectangle to another one.\n     * @param rectangle - The rectangle to copy to.\n     * @returns Returns given parameter.\n     */\n    copyTo(rectangle: Rectangle): Rectangle\n    {\n        rectangle.x = this.x;\n        rectangle.y = this.y;\n        rectangle.width = this.width;\n        rectangle.height = this.height;\n\n        return rectangle;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rectangle\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coordinates are within this Rectangle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        if (x >= this.x && x < this.x + this.width)\n        {\n            if (y >= this.y && y < this.y + this.height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Determines whether the `other` Rectangle transformed by `transform` intersects with `this` Rectangle object.\n     * Returns true only if the area of the intersection is >0, this means that Rectangles\n     * sharing a side are not overlapping. Another side effect is that an arealess rectangle\n     * (width or height equal to zero) can't intersect any other rectangle.\n     * @param {Rectangle} other - The Rectangle to intersect with `this`.\n     * @param {Matrix} transform - The transformation matrix of `other`.\n     * @returns {boolean} A value of `true` if the transformed `other` Rectangle intersects with `this`; otherwise `false`.\n     */\n    intersects(other: Rectangle, transform?: Matrix): boolean\n    {\n        if (!transform)\n        {\n            const x0 = this.x < other.x ? other.x : this.x;\n            const x1 = this.right > other.right ? other.right : this.right;\n\n            if (x1 <= x0)\n            {\n                return false;\n            }\n\n            const y0 = this.y < other.y ? other.y : this.y;\n            const y1 = this.bottom > other.bottom ? other.bottom : this.bottom;\n\n            return y1 > y0;\n        }\n\n        const x0 = this.left;\n        const x1 = this.right;\n        const y0 = this.top;\n        const y1 = this.bottom;\n\n        if (x1 <= x0 || y1 <= y0)\n        {\n            return false;\n        }\n\n        const lt = tempPoints[0].set(other.left, other.top);\n        const lb = tempPoints[1].set(other.left, other.bottom);\n        const rt = tempPoints[2].set(other.right, other.top);\n        const rb = tempPoints[3].set(other.right, other.bottom);\n\n        if (rt.x <= lt.x || lb.y <= lt.y)\n        {\n            return false;\n        }\n\n        const s = Math.sign((transform.a * transform.d) - (transform.b * transform.c));\n\n        if (s === 0)\n        {\n            return false;\n        }\n\n        transform.apply(lt, lt);\n        transform.apply(lb, lb);\n        transform.apply(rt, rt);\n        transform.apply(rb, rb);\n\n        if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0\n            || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1\n            || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0\n            || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1)\n        {\n            return false;\n        }\n\n        const nx = s * (lb.y - lt.y);\n        const ny = s * (lt.x - lb.x);\n        const n00 = (nx * x0) + (ny * y0);\n        const n10 = (nx * x1) + (ny * y0);\n        const n01 = (nx * x0) + (ny * y1);\n        const n11 = (nx * x1) + (ny * y1);\n\n        if (Math.max(n00, n10, n01, n11) <= (nx * lt.x) + (ny * lt.y)\n            || Math.min(n00, n10, n01, n11) >= (nx * rb.x) + (ny * rb.y))\n        {\n            return false;\n        }\n\n        const mx = s * (lt.y - rt.y);\n        const my = s * (rt.x - lt.x);\n        const m00 = (mx * x0) + (my * y0);\n        const m10 = (mx * x1) + (my * y0);\n        const m01 = (mx * x0) + (my * y1);\n        const m11 = (mx * x1) + (my * y1);\n\n        if (Math.max(m00, m10, m01, m11) <= (mx * lt.x) + (my * lt.y)\n            || Math.min(m00, m10, m01, m11) >= (mx * rb.x) + (my * rb.y))\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Pads the rectangle making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     * @param paddingX - The horizontal padding amount.\n     * @param paddingY - The vertical padding amount.\n     * @returns Returns itself.\n     */\n    pad(paddingX = 0, paddingY = paddingX): this\n    {\n        this.x -= paddingX;\n        this.y -= paddingY;\n\n        this.width += paddingX * 2;\n        this.height += paddingY * 2;\n\n        return this;\n    }\n\n    /**\n     * Fits this rectangle around the passed one.\n     * @param rectangle - The rectangle to fit.\n     * @returns Returns itself.\n     */\n    fit(rectangle: Rectangle): this\n    {\n        const x1 = Math.max(this.x, rectangle.x);\n        const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.max(this.y, rectangle.y);\n        const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = Math.max(x2 - x1, 0);\n        this.y = y1;\n        this.height = Math.max(y2 - y1, 0);\n\n        return this;\n    }\n\n    /**\n     * Enlarges rectangle that way its corners lie on grid\n     * @param resolution - resolution\n     * @param eps - precision\n     * @returns Returns itself.\n     */\n    ceil(resolution = 1, eps = 0.001): this\n    {\n        const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n        const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n\n        this.x = Math.floor((this.x + eps) * resolution) / resolution;\n        this.y = Math.floor((this.y + eps) * resolution) / resolution;\n\n        this.width = x2 - this.x;\n        this.height = y2 - this.y;\n\n        return this;\n    }\n\n    /**\n     * Enlarges this rectangle to include the passed rectangle.\n     * @param rectangle - The rectangle to include.\n     * @returns Returns itself.\n     */\n    enlarge(rectangle: Rectangle): this\n    {\n        const x1 = Math.min(this.x, rectangle.x);\n        const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.min(this.y, rectangle.y);\n        const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = x2 - x1;\n        this.y = y1;\n        this.height = y2 - y1;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Rectangle x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n    }\n    // #endif\n}\n","import { SHAPES } from './../const';\nimport { Rectangle } from './Rectangle';\n\n/**\n * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n * @memberof PIXI\n */\nexport class Circle\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n\n    /** @default 0 */\n    public radius: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.CIRC\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.CIRC;\n\n    /**\n     * @param x - The X coordinate of the center of this circle\n     * @param y - The Y coordinate of the center of this circle\n     * @param radius - The radius of the circle\n     */\n    constructor(x = 0, y = 0, radius = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n\n        this.type = SHAPES.CIRC;\n    }\n\n    /**\n     * Creates a clone of this Circle instance\n     * @returns A copy of the Circle\n     */\n    clone(): Circle\n    {\n        return new Circle(this.x, this.y, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this circle\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coordinates are within this Circle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.radius <= 0)\n        {\n            return false;\n        }\n\n        const r2 = this.radius * this.radius;\n        let dx = (this.x - x);\n        let dy = (this.y - y);\n\n        dx *= dx;\n        dy *= dy;\n\n        return (dx + dy <= r2);\n    }\n\n    /**\n     * Returns the framing rectangle of the circle as a Rectangle object\n     * @returns The framing rectangle\n     */\n    getBounds(): Rectangle\n    {\n        return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Circle x=${this.x} y=${this.y} radius=${this.radius}]`;\n    }\n    // #endif\n}\n","import { Rectangle } from './Rectangle';\nimport { SHAPES } from '../const';\n\n/**\n * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n * @memberof PIXI\n */\nexport class Ellipse\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.ELIP\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.ELIP;\n\n    /**\n     * @param x - The X coordinate of the center of this ellipse\n     * @param y - The Y coordinate of the center of this ellipse\n     * @param halfWidth - The half width of this ellipse\n     * @param halfHeight - The half height of this ellipse\n     */\n    constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.width = halfWidth;\n        this.height = halfHeight;\n\n        this.type = SHAPES.ELIP;\n    }\n\n    /**\n     * Creates a clone of this Ellipse instance\n     * @returns {PIXI.Ellipse} A copy of the ellipse\n     */\n    clone(): Ellipse\n    {\n        return new Ellipse(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coords are within this ellipse\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        // normalize the coords to an ellipse with center 0,0\n        let normx = ((x - this.x) / this.width);\n        let normy = ((y - this.y) / this.height);\n\n        normx *= normx;\n        normy *= normy;\n\n        return (normx + normy <= 1);\n    }\n\n    /**\n     * Returns the framing rectangle of the ellipse as a Rectangle object\n     * @returns The framing rectangle\n     */\n    getBounds(): Rectangle\n    {\n        return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Ellipse x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n    }\n    // #endif\n}\n","import { SHAPES } from '../const';\nimport type { IPointData } from '../IPointData';\n\n/**\n * A class to define a shape via user defined coordinates.\n * @memberof PIXI\n */\nexport class Polygon\n{\n    /** An array of the points of this polygon. */\n    public points: number[];\n\n    /** `false` after moveTo, `true` after `closePath`. In all other cases it is `true`. */\n    public closeStroke: boolean;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.POLY\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.POLY;\n\n    constructor(points: IPointData[] | number[]);\n    constructor(...points: IPointData[] | number[]);\n\n    /**\n     * @param {PIXI.IPointData[]|number[]} points - This can be an array of Points\n     *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n     *  the arguments passed can be all the points of the polygon e.g.\n     *  `new Polygon(new Point(), new Point(), ...)`, or the arguments passed can be flat\n     *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n     */\n    constructor(...points: any[])\n    {\n        let flat: IPointData[] | number[] = Array.isArray(points[0]) ? points[0] : points;\n\n        // if this is an array of points, convert it to a flat array of numbers\n        if (typeof flat[0] !== 'number')\n        {\n            const p: number[] = [];\n\n            for (let i = 0, il = flat.length; i < il; i++)\n            {\n                p.push((flat[i] as IPointData).x, (flat[i] as IPointData).y);\n            }\n\n            flat = p;\n        }\n\n        this.points = flat as number[];\n        this.type = SHAPES.POLY;\n        this.closeStroke = true;\n    }\n\n    /**\n     * Creates a clone of this polygon.\n     * @returns - A copy of the polygon.\n     */\n    clone(): Polygon\n    {\n        const points = this.points.slice();\n        const polygon = new Polygon(points);\n\n        polygon.closeStroke = this.closeStroke;\n\n        return polygon;\n    }\n\n    /**\n     * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this polygon.\n     */\n    contains(x: number, y: number): boolean\n    {\n        let inside = false;\n\n        // use some raycasting to test hits\n        // https://github.com/substack/point-in-polygon/blob/master/index.js\n        const length = this.points.length / 2;\n\n        for (let i = 0, j = length - 1; i < length; j = i++)\n        {\n            const xi = this.points[i * 2];\n            const yi = this.points[(i * 2) + 1];\n            const xj = this.points[j * 2];\n            const yj = this.points[(j * 2) + 1];\n            const intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * ((y - yi) / (yj - yi))) + xi);\n\n            if (intersect)\n            {\n                inside = !inside;\n            }\n        }\n\n        return inside;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Polygon`\n            + `closeStroke=${this.closeStroke}`\n            + `points=${this.points.reduce((pointsDesc, currentPoint) => `${pointsDesc}, ${currentPoint}`, '')}]`;\n    }\n    // #endif\n}\n","import { SHAPES } from '../const';\n\n/**\n * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n * top-left corner point (x, y) and by its width and its height and its radius.\n * @memberof PIXI\n */\nexport class RoundedRectangle\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /** @default 20 */\n    public radius: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.RREC\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.RREC;\n\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n     * @param width - The overall width of this rounded rectangle\n     * @param height - The overall height of this rounded rectangle\n     * @param radius - Controls the radius of the rounded corners\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0, radius = 20)\n    {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.radius = radius;\n        this.type = SHAPES.RREC;\n    }\n\n    /**\n     * Creates a clone of this Rounded Rectangle.\n     * @returns - A copy of the rounded rectangle.\n     */\n    clone(): RoundedRectangle\n    {\n        return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this Rounded Rectangle.\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n        if (x >= this.x && x <= this.x + this.width)\n        {\n            if (y >= this.y && y <= this.y + this.height)\n            {\n                const radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n\n                if ((y >= this.y + radius && y <= this.y + this.height - radius)\n                || (x >= this.x + radius && x <= this.x + this.width - radius))\n                {\n                    return true;\n                }\n                let dx = x - (this.x + radius);\n                let dy = y - (this.y + radius);\n                const radius2 = radius * radius;\n\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.width - radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dy = y - (this.y + this.height - radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:RoundedRectangle x=${this.x} y=${this.y}`\n            + `width=${this.width} height=${this.height} radius=${this.radius}]`;\n    }\n    // #endif\n}\n","import type { IPointData } from './IPointData';\nimport type { IPoint } from './IPoint';\n\nexport interface ObservablePoint extends GlobalMixins.Point, IPoint {}\n\n/**\n * The ObservablePoint object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis.\n *\n * An `ObservablePoint` is a point that triggers a callback when the point's position is changed.\n * @memberof PIXI\n */\nexport class ObservablePoint<T = any> implements IPoint\n{\n    /** The callback function triggered when `x` and/or `y` are changed */\n    public cb: (this: T) => any;\n\n    /** The owner of the callback */\n    public scope: any;\n\n    _x: number;\n    _y: number;\n\n    /**\n     * Creates a new `ObservablePoint`\n     * @param cb - callback function triggered when `x` and/or `y` are changed\n     * @param scope - owner of callback\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(cb: (this: T) => any, scope: T, x = 0, y = 0)\n    {\n        this._x = x;\n        this._y = y;\n\n        this.cb = cb;\n        this.scope = scope;\n    }\n\n    /**\n     * Creates a clone of this point.\n     * The callback and scope params can be overridden otherwise they will default\n     * to the clone object's values.\n     * @override\n     * @param cb - The callback function triggered when `x` and/or `y` are changed\n     * @param scope - The owner of the callback\n     * @returns a copy of this observable point\n     */\n    clone(cb = this.cb, scope = this.scope): ObservablePoint\n    {\n        return new ObservablePoint(cb, scope, this._x, this._y);\n    }\n\n    /**\n     * Sets the point to a new `x` and `y` position.\n     * If `y` is omitted, both `x` and `y` will be set to `x`.\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=x] - position of the point on the y axis\n     * @returns The observable point instance itself\n     */\n    set(x = 0, y = x): this\n    {\n        if (this._x !== x || this._y !== y)\n        {\n            this._x = x;\n            this._y = y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies x and y from the given point (`p`)\n     * @param p - The point to copy from. Can be any of type that is or extends `IPointData`\n     * @returns The observable point instance itself\n     */\n    copyFrom(p: IPointData): this\n    {\n        if (this._x !== p.x || this._y !== p.y)\n        {\n            this._x = p.x;\n            this._y = p.y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies this point's x and y into that of the given point (`p`)\n     * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n     * @returns The point (`p`) with values updated\n     */\n    copyTo<T extends IPoint>(p: T): T\n    {\n        p.set(this._x, this._y);\n\n        return p;\n    }\n\n    /**\n     * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n     * @param p - The point to check\n     * @returns Returns `true` if both `x` and `y` are equal\n     */\n    equals(p: IPointData): boolean\n    {\n        return (p.x === this._x) && (p.y === this._y);\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:ObservablePoint x=${0} y=${0} scope=${this.scope}]`;\n    }\n    // #endif\n\n    /** Position of the observable point on the x axis. */\n    get x(): number\n    {\n        return this._x;\n    }\n\n    set x(value: number)\n    {\n        if (this._x !== value)\n        {\n            this._x = value;\n            this.cb.call(this.scope);\n        }\n    }\n\n    /** Position of the observable point on the y axis. */\n    get y(): number\n    {\n        return this._y;\n    }\n\n    set y(value: number)\n    {\n        if (this._y !== value)\n        {\n            this._y = value;\n            this.cb.call(this.scope);\n        }\n    }\n}\n","import { Point } from './Point';\nimport { PI_2 } from './const';\n\nimport type { Transform } from './Transform';\nimport type { IPointData } from './IPointData';\n\n/**\n * The PixiJS Matrix as a class makes it a lot faster.\n *\n * Here is a representation of it:\n * ```\n * | a | c | tx|\n * | b | d | ty|\n * | 0 | 0 | 1 |\n * ```\n * @memberof PIXI\n */\nexport class Matrix\n{\n    /** @default 1 */\n    public a: number;\n\n    /** @default 0 */\n    public b: number;\n\n    /** @default 0 */\n    public c: number;\n\n    /** @default 1 */\n    public d: number;\n\n    /** @default 0 */\n    public tx: number;\n\n    /** @default 0 */\n    public ty: number;\n\n    public array: Float32Array | null = null;\n\n    /**\n     * @param a - x scale\n     * @param b - y skew\n     * @param c - x skew\n     * @param d - y scale\n     * @param tx - x translation\n     * @param ty - y translation\n     */\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0)\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n    }\n\n    /**\n     * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n     *\n     * a = array[0]\n     * b = array[1]\n     * c = array[3]\n     * d = array[4]\n     * tx = array[2]\n     * ty = array[5]\n     * @param array - The array that the matrix will be populated from.\n     */\n    fromArray(array: number[]): void\n    {\n        this.a = array[0];\n        this.b = array[1];\n        this.c = array[3];\n        this.d = array[4];\n        this.tx = array[2];\n        this.ty = array[5];\n    }\n\n    /**\n     * Sets the matrix properties.\n     * @param a - Matrix component\n     * @param b - Matrix component\n     * @param c - Matrix component\n     * @param d - Matrix component\n     * @param tx - Matrix component\n     * @param ty - Matrix component\n     * @returns This matrix. Good for chaining method calls.\n     */\n    set(a: number, b: number, c: number, d: number, tx: number, ty: number): this\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n\n        return this;\n    }\n\n    /**\n     * Creates an array from the current Matrix object.\n     * @param transpose - Whether we need to transpose the matrix or not\n     * @param [out=new Float32Array(9)] - If provided the array will be assigned to out\n     * @returns The newly created array which contains the matrix\n     */\n    toArray(transpose: boolean, out?: Float32Array): Float32Array\n    {\n        if (!this.array)\n        {\n            this.array = new Float32Array(9);\n        }\n\n        const array = out || this.array;\n\n        if (transpose)\n        {\n            array[0] = this.a;\n            array[1] = this.b;\n            array[2] = 0;\n            array[3] = this.c;\n            array[4] = this.d;\n            array[5] = 0;\n            array[6] = this.tx;\n            array[7] = this.ty;\n            array[8] = 1;\n        }\n        else\n        {\n            array[0] = this.a;\n            array[1] = this.c;\n            array[2] = this.tx;\n            array[3] = this.b;\n            array[4] = this.d;\n            array[5] = this.ty;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n\n        return array;\n    }\n\n    /**\n     * Get a new position with the current transformation applied.\n     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n     * @param pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @returns {PIXI.Point} The new point, transformed through this matrix\n     */\n    apply<P extends IPointData = Point>(pos: IPointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point()) as P;\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.a * x) + (this.c * y) + this.tx;\n        newPos.y = (this.b * x) + (this.d * y) + this.ty;\n\n        return newPos;\n    }\n\n    /**\n     * Get a new position with the inverse of the current transformation applied.\n     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n     * @param pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @returns {PIXI.Point} The new point, inverse-transformed through this matrix\n     */\n    applyInverse<P extends IPointData = Point>(pos: IPointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point()) as P;\n\n        const id = 1 / ((this.a * this.d) + (this.c * -this.b));\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.d * id * x) + (-this.c * id * y) + (((this.ty * this.c) - (this.tx * this.d)) * id);\n        newPos.y = (this.a * id * y) + (-this.b * id * x) + (((-this.ty * this.a) + (this.tx * this.b)) * id);\n\n        return newPos;\n    }\n\n    /**\n     * Translates the matrix on the x and y.\n     * @param x - How much to translate x by\n     * @param y - How much to translate y by\n     * @returns This matrix. Good for chaining method calls.\n     */\n    translate(x: number, y: number): this\n    {\n        this.tx += x;\n        this.ty += y;\n\n        return this;\n    }\n\n    /**\n     * Applies a scale transformation to the matrix.\n     * @param x - The amount to scale horizontally\n     * @param y - The amount to scale vertically\n     * @returns This matrix. Good for chaining method calls.\n     */\n    scale(x: number, y: number): this\n    {\n        this.a *= x;\n        this.d *= y;\n        this.c *= x;\n        this.b *= y;\n        this.tx *= x;\n        this.ty *= y;\n\n        return this;\n    }\n\n    /**\n     * Applies a rotation transformation to the matrix.\n     * @param angle - The angle in radians.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    rotate(angle: number): this\n    {\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        const a1 = this.a;\n        const c1 = this.c;\n        const tx1 = this.tx;\n\n        this.a = (a1 * cos) - (this.b * sin);\n        this.b = (a1 * sin) + (this.b * cos);\n        this.c = (c1 * cos) - (this.d * sin);\n        this.d = (c1 * sin) + (this.d * cos);\n        this.tx = (tx1 * cos) - (this.ty * sin);\n        this.ty = (tx1 * sin) + (this.ty * cos);\n\n        return this;\n    }\n\n    /**\n     * Appends the given Matrix to this Matrix.\n     * @param matrix - The matrix to append.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    append(matrix: Matrix): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n\n        this.a = (matrix.a * a1) + (matrix.b * c1);\n        this.b = (matrix.a * b1) + (matrix.b * d1);\n        this.c = (matrix.c * a1) + (matrix.d * c1);\n        this.d = (matrix.c * b1) + (matrix.d * d1);\n\n        this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;\n        this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;\n\n        return this;\n    }\n\n    /**\n     * Sets the matrix based on all the available properties\n     * @param x - Position on the x axis\n     * @param y - Position on the y axis\n     * @param pivotX - Pivot on the x axis\n     * @param pivotY - Pivot on the y axis\n     * @param scaleX - Scale on the x axis\n     * @param scaleY - Scale on the y axis\n     * @param rotation - Rotation in radians\n     * @param skewX - Skew on the x axis\n     * @param skewY - Skew on the y axis\n     * @returns This matrix. Good for chaining method calls.\n     */\n    setTransform(x: number, y: number, pivotX: number, pivotY: number, scaleX: number,\n        scaleY: number, rotation: number, skewX: number, skewY: number): this\n    {\n        this.a = Math.cos(rotation + skewY) * scaleX;\n        this.b = Math.sin(rotation + skewY) * scaleX;\n        this.c = -Math.sin(rotation - skewX) * scaleY;\n        this.d = Math.cos(rotation - skewX) * scaleY;\n\n        this.tx = x - ((pivotX * this.a) + (pivotY * this.c));\n        this.ty = y - ((pivotX * this.b) + (pivotY * this.d));\n\n        return this;\n    }\n\n    /**\n     * Prepends the given Matrix to this Matrix.\n     * @param matrix - The matrix to prepend\n     * @returns This matrix. Good for chaining method calls.\n     */\n    prepend(matrix: Matrix): this\n    {\n        const tx1 = this.tx;\n\n        if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1)\n        {\n            const a1 = this.a;\n            const c1 = this.c;\n\n            this.a = (a1 * matrix.a) + (this.b * matrix.c);\n            this.b = (a1 * matrix.b) + (this.b * matrix.d);\n            this.c = (c1 * matrix.a) + (this.d * matrix.c);\n            this.d = (c1 * matrix.b) + (this.d * matrix.d);\n        }\n\n        this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;\n        this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;\n\n        return this;\n    }\n\n    /**\n     * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n     * @param transform - The transform to apply the properties to.\n     * @returns The transform with the newly applied properties\n     */\n    decompose(transform: Transform): Transform\n    {\n        // sort out rotation / skew..\n        const a = this.a;\n        const b = this.b;\n        const c = this.c;\n        const d = this.d;\n        const pivot = transform.pivot;\n\n        const skewX = -Math.atan2(-c, d);\n        const skewY = Math.atan2(b, a);\n\n        const delta = Math.abs(skewX + skewY);\n\n        if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001)\n        {\n            transform.rotation = skewY;\n            transform.skew.x = transform.skew.y = 0;\n        }\n        else\n        {\n            transform.rotation = 0;\n            transform.skew.x = skewX;\n            transform.skew.y = skewY;\n        }\n\n        // next set scale\n        transform.scale.x = Math.sqrt((a * a) + (b * b));\n        transform.scale.y = Math.sqrt((c * c) + (d * d));\n\n        // next set position\n        transform.position.x = this.tx + ((pivot.x * a) + (pivot.y * c));\n        transform.position.y = this.ty + ((pivot.x * b) + (pivot.y * d));\n\n        return transform;\n    }\n\n    /**\n     * Inverts this matrix\n     * @returns This matrix. Good for chaining method calls.\n     */\n    invert(): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n        const tx1 = this.tx;\n        const n = (a1 * d1) - (b1 * c1);\n\n        this.a = d1 / n;\n        this.b = -b1 / n;\n        this.c = -c1 / n;\n        this.d = a1 / n;\n        this.tx = ((c1 * this.ty) - (d1 * tx1)) / n;\n        this.ty = -((a1 * this.ty) - (b1 * tx1)) / n;\n\n        return this;\n    }\n\n    /**\n     * Resets this Matrix to an identity (default) matrix.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    identity(): this\n    {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n\n        return this;\n    }\n\n    /**\n     * Creates a new Matrix object with the same values as this one.\n     * @returns A copy of this matrix. Good for chaining method calls.\n     */\n    clone(): Matrix\n    {\n        const matrix = new Matrix();\n\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the given matrix to be the same as the ones in this matrix\n     * @param matrix - The matrix to copy to.\n     * @returns The matrix given in parameter with its values updated.\n     */\n    copyTo(matrix: Matrix): Matrix\n    {\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the matrix to be the same as the ones in given matrix\n     * @param {PIXI.Matrix} matrix - The matrix to copy from.\n     * @returns {PIXI.Matrix} this\n     */\n    copyFrom(matrix: Matrix): this\n    {\n        this.a = matrix.a;\n        this.b = matrix.b;\n        this.c = matrix.c;\n        this.d = matrix.d;\n        this.tx = matrix.tx;\n        this.ty = matrix.ty;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Matrix a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty}]`;\n    }\n    // #endif\n\n    /**\n     * A default (identity) matrix\n     * @readonly\n     */\n    static get IDENTITY(): Matrix\n    {\n        return new Matrix();\n    }\n\n    /**\n     * A temp matrix\n     * @readonly\n     */\n    static get TEMP_MATRIX(): Matrix\n    {\n        return new Matrix();\n    }\n}\n","// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group\n//\n// This file implements the dihedral group of order 16, also called\n// of degree 8. That's why its called groupD8.\n\nimport { Matrix } from './Matrix';\n\n/*\n * Transform matrix for operation n is:\n * | ux | vx |\n * | uy | vy |\n */\n\nconst ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nconst uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\n\n/**\n * [Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n * for the composition of each rotation in the dihederal group D8.\n * @type {number[][]}\n * @private\n */\nconst rotationCayley: number[][] = [];\n\n/**\n * Matrices for each `GD8Symmetry` rotation.\n * @type {PIXI.Matrix[]}\n * @private\n */\nconst rotationMatrices: Matrix[] = [];\n\n/*\n * Alias for {@code Math.sign}.\n */\nconst signum = Math.sign;\n\n/*\n * Initializes `rotationCayley` and `rotationMatrices`. It is called\n * only once below.\n */\nfunction init(): void\n{\n    for (let i = 0; i < 16; i++)\n    {\n        const row: number[] = [];\n\n        rotationCayley.push(row);\n\n        for (let j = 0; j < 16; j++)\n        {\n            /* Multiplies rotation matrices i and j. */\n            const _ux = signum((ux[i] * ux[j]) + (vx[i] * uy[j]));\n            const _uy = signum((uy[i] * ux[j]) + (vy[i] * uy[j]));\n            const _vx = signum((ux[i] * vx[j]) + (vx[i] * vy[j]));\n            const _vy = signum((uy[i] * vx[j]) + (vy[i] * vy[j]));\n\n            /* Finds rotation matrix matching the product and pushes it. */\n            for (let k = 0; k < 16; k++)\n            {\n                if (ux[k] === _ux && uy[k] === _uy\n                      && vx[k] === _vx && vy[k] === _vy)\n                {\n                    row.push(k);\n                    break;\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < 16; i++)\n    {\n        const mat = new Matrix();\n\n        mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n        rotationMatrices.push(mat);\n    }\n}\n\ninit();\n\ntype GD8Symmetry = number;\n/**\n * @memberof PIXI\n * @typedef {number} GD8Symmetry\n * @see PIXI.groupD8\n */\n\n/**\n * Implements the dihedral group D8, which is similar to\n * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};\n * D8 is the same but with diagonals, and it is used for texture\n * rotations.\n *\n * The directions the U- and V- axes after rotation\n * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`\n * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.\n *\n * **Origin:**<br>\n *  This is the small part of gameofbombs.com portal system. It works.\n * @see PIXI.groupD8.E\n * @see PIXI.groupD8.SE\n * @see PIXI.groupD8.S\n * @see PIXI.groupD8.SW\n * @see PIXI.groupD8.W\n * @see PIXI.groupD8.NW\n * @see PIXI.groupD8.N\n * @see PIXI.groupD8.NE\n * @author Ivan @ivanpopelyshev\n * @namespace PIXI.groupD8\n * @memberof PIXI\n */\nexport const groupD8 = {\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 0°       | East      |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    E: 0,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 45°↻     | Southeast |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    SE: 1,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 90°↻     | South     |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    S: 2,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 135°↻    | Southwest |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    SW: 3,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 180°     | West      |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    W: 4,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -135°/225°↻ | Northwest    |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    NW: 5,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -90°/270°↻  | North        |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    N: 6,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -45°/315°↻  | Northeast    |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    NE: 7,\n\n    /**\n     * Reflection about Y-axis.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MIRROR_VERTICAL: 8,\n\n    /**\n     * Reflection about the main diagonal.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MAIN_DIAGONAL: 10,\n\n    /**\n     * Reflection about X-axis.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MIRROR_HORIZONTAL: 12,\n\n    /**\n     * Reflection about reverse diagonal.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    REVERSE_DIAGONAL: 14,\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The X-component of the U-axis\n     *    after rotating the axes.\n     */\n    uX: (ind: GD8Symmetry): GD8Symmetry => ux[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The Y-component of the U-axis\n     *    after rotating the axes.\n     */\n    uY: (ind: GD8Symmetry): GD8Symmetry => uy[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The X-component of the V-axis\n     *    after rotating the axes.\n     */\n    vX: (ind: GD8Symmetry): GD8Symmetry => vx[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The Y-component of the V-axis\n     *    after rotating the axes.\n     */\n    vY: (ind: GD8Symmetry): GD8Symmetry => vy[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite\n     *   is needed. Only rotations have opposite symmetries while\n     *   reflections don't.\n     * @returns {PIXI.GD8Symmetry} The opposite symmetry of `rotation`\n     */\n    inv: (rotation: GD8Symmetry): GD8Symmetry =>\n    {\n        if (rotation & 8)// true only if between 8 & 15 (reflections)\n        {\n            return rotation & 15;// or rotation % 16\n        }\n\n        return (-rotation) & 7;// or (8 - rotation) % 8\n    },\n\n    /**\n     * Composes the two D8 operations.\n     *\n     * Taking `^` as reflection:\n     *\n     * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |\n     * |-------|-----|-----|-----|-----|------|-------|-------|-------|\n     * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |\n     * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |\n     * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |\n     * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |\n     * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |\n     * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |\n     * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |\n     * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |\n     *\n     * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which\n     *   is the row in the above cayley table.\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which\n     *   is the column in the above cayley table.\n     * @returns {PIXI.GD8Symmetry} Composed operation\n     */\n    add: (rotationSecond: GD8Symmetry, rotationFirst: GD8Symmetry): GD8Symmetry => (\n        rotationCayley[rotationSecond][rotationFirst]\n    ),\n\n    /**\n     * Reverse of `add`.\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation\n     * @returns {PIXI.GD8Symmetry} Result\n     */\n    sub: (rotationSecond: GD8Symmetry, rotationFirst: GD8Symmetry): GD8Symmetry => (\n        rotationCayley[rotationSecond][groupD8.inv(rotationFirst)]\n    ),\n\n    /**\n     * Adds 180 degrees to rotation, which is a commutative\n     * operation.\n     * @memberof PIXI.groupD8\n     * @param {number} rotation - The number to rotate.\n     * @returns {number} Rotated number\n     */\n    rotate180: (rotation: number): number => rotation ^ 4,\n\n    /**\n     * Checks if the rotation angle is vertical, i.e. south\n     * or north. It doesn't work for reflections.\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotation - The number to check.\n     * @returns {boolean} Whether or not the direction is vertical\n     */\n    isVertical: (rotation: GD8Symmetry): boolean => (rotation & 3) === 2, // rotation % 4 === 2\n\n    /**\n     * Approximates the vector `V(dx,dy)` into one of the\n     * eight directions provided by `groupD8`.\n     * @memberof PIXI.groupD8\n     * @param {number} dx - X-component of the vector\n     * @param {number} dy - Y-component of the vector\n     * @returns {PIXI.GD8Symmetry} Approximation of the vector into\n     *  one of the eight symmetries.\n     */\n    byDirection: (dx: number, dy: number): GD8Symmetry =>\n    {\n        if (Math.abs(dx) * 2 <= Math.abs(dy))\n        {\n            if (dy >= 0)\n            {\n                return groupD8.S;\n            }\n\n            return groupD8.N;\n        }\n        else if (Math.abs(dy) * 2 <= Math.abs(dx))\n        {\n            if (dx > 0)\n            {\n                return groupD8.E;\n            }\n\n            return groupD8.W;\n        }\n        else if (dy > 0)\n        {\n            if (dx > 0)\n            {\n                return groupD8.SE;\n            }\n\n            return groupD8.SW;\n        }\n        else if (dx > 0)\n        {\n            return groupD8.NE;\n        }\n\n        return groupD8.NW;\n    },\n\n    /**\n     * Helps sprite to compensate texture packer rotation.\n     * @memberof PIXI.groupD8\n     * @param {PIXI.Matrix} matrix - sprite world matrix\n     * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.\n     * @param {number} tx - sprite anchoring\n     * @param {number} ty - sprite anchoring\n     */\n    matrixAppendRotationInv: (matrix: Matrix, rotation: GD8Symmetry, tx = 0, ty = 0): void =>\n    {\n        // Packer used \"rotation\", we use \"inv(rotation)\"\n        const mat: Matrix = rotationMatrices[groupD8.inv(rotation)];\n\n        mat.tx = tx;\n        mat.ty = ty;\n        matrix.append(mat);\n    },\n};\n","import { ObservablePoint } from './ObservablePoint';\nimport { Matrix } from './Matrix';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Transform extends GlobalMixins.Transform {}\n\n/**\n * Transform that takes care about its versions.\n * @memberof PIXI\n */\nexport class Transform\n{\n    /** A default (identity) transform. */\n    public static readonly IDENTITY = new Transform();\n\n    /** The world transformation matrix. */\n    public worldTransform: Matrix;\n\n    /** The local transformation matrix. */\n    public localTransform: Matrix;\n\n    /** The coordinate of the object relative to the local coordinates of the parent. */\n    public position: ObservablePoint;\n\n    /** The scale factor of the object. */\n    public scale: ObservablePoint;\n\n    /** The pivot point of the displayObject that it rotates around. */\n    public pivot: ObservablePoint;\n\n    /** The skew amount, on the x and y axis. */\n    public skew: ObservablePoint;\n\n    /** The locally unique ID of the parent's world transform used to calculate the current world transformation matrix. */\n    public _parentID: number;\n\n    /** The locally unique ID of the world transform. */\n    _worldID: number;\n\n    /** The rotation amount. */\n    protected _rotation: number;\n\n    /**\n     * The X-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     */\n    protected _cx: number;\n\n    /**\n     * The Y-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     */\n    protected _sx: number;\n\n    /**\n     * The X-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     */\n    protected _cy: number;\n\n    /**\n     * The Y-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     */\n    protected _sy: number;\n\n    /** The locally unique ID of the local transform. */\n    protected _localID: number;\n\n    /** The locally unique ID of the local transform used to calculate the current local transformation matrix. */\n    protected _currentLocalID: number;\n\n    constructor()\n    {\n        this.worldTransform = new Matrix();\n        this.localTransform = new Matrix();\n        this.position = new ObservablePoint(this.onChange, this, 0, 0);\n        this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n        this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n\n        this._rotation = 0;\n        this._cx = 1;\n        this._sx = 0;\n        this._cy = 0;\n        this._sy = 1;\n        this._localID = 0;\n        this._currentLocalID = 0;\n\n        this._worldID = 0;\n        this._parentID = 0;\n    }\n\n    /** Called when a value changes. */\n    protected onChange(): void\n    {\n        this._localID++;\n    }\n\n    /** Called when the skew or the rotation changes. */\n    protected updateSkew(): void\n    {\n        this._cx = Math.cos(this._rotation + this.skew.y);\n        this._sx = Math.sin(this._rotation + this.skew.y);\n        this._cy = -Math.sin(this._rotation - this.skew.x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew.x); // sin, added PI/2\n\n        this._localID++;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Transform `\n            + `position=(${this.position.x}, ${this.position.y}) `\n            + `rotation=${this.rotation} `\n            + `scale=(${this.scale.x}, ${this.scale.y}) `\n            + `skew=(${this.skew.x}, ${this.skew.y}) `\n            + `]`;\n    }\n    // #endif\n\n    /** Updates the local transformation matrix. */\n    updateLocalTransform(): void\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n    }\n\n    /**\n     * Updates the local and the world transformation matrices.\n     * @param parentTransform - The parent transform\n     */\n    updateTransform(parentTransform: Transform): void\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n\n        if (this._parentID !== parentTransform._worldID)\n        {\n            // concat the parent matrix with the objects transform.\n            const pt = parentTransform.worldTransform;\n            const wt = this.worldTransform;\n\n            wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n            wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n            wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n            wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n            wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n            wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n\n            this._parentID = parentTransform._worldID;\n\n            // update the id of the transform..\n            this._worldID++;\n        }\n    }\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     * @param matrix - The matrix to decompose\n     */\n    setFromMatrix(matrix: Matrix): void\n    {\n        matrix.decompose(this);\n        this._localID++;\n    }\n\n    /** The rotation of the object in radians. */\n    get rotation(): number\n    {\n        return this._rotation;\n    }\n\n    set rotation(value: number)\n    {\n        if (this._rotation !== value)\n        {\n            this._rotation = value;\n            this.updateSkew();\n        }\n    }\n}\n"],"names":[],"mappings":"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"}