{"version":3,"file":"filter-tilt-shift.mjs","sources":["../src/TiltShiftAxisFilter.ts","../src/TiltShiftXFilter.ts","../src/TiltShiftYFilter.ts","../src/TiltShiftFilter.ts"],"sourcesContent":["import { vertex } from '@tools/fragments';\nimport fragment from './tilt-shift.frag';\nimport { Filter, Point } from '@pixi/core';\n\n// @author Vico @vicocotea\n// original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js\n// by Evan Wallace : http://madebyevan.com/\n\n/**\n * A TiltShiftAxisFilter.\n *\n * @class\n * @extends PIXI.Filter\n * @private\n */\nclass TiltShiftAxisFilter extends Filter\n{\n    constructor(blur = 100, gradientBlur = 600, start?: Point, end?: Point)\n    {\n        super(vertex, fragment);\n        this.uniforms.blur = blur;\n        this.uniforms.gradientBlur = gradientBlur;\n        this.uniforms.start = start || new Point(0, window.innerHeight / 2);\n        this.uniforms.end = end || new Point(600, window.innerHeight / 2);\n        this.uniforms.delta = new Point(30, 30);\n        this.uniforms.texSize = new Point(window.innerWidth, window.innerHeight);\n        this.updateDelta();\n    }\n\n    /**\n     * Updates the filter delta values.\n     * This is overridden in the X and Y filters, does nothing for this class.\n     *\n     */\n    protected updateDelta(): void\n    {\n        this.uniforms.delta.x = 0;\n        this.uniforms.delta.y = 0;\n    }\n\n    /**\n     * The strength of the blur.\n     *\n     * @memberof TiltShiftAxisFilter#\n     */\n    get blur(): number\n    {\n        return this.uniforms.blur;\n    }\n    set blur(value: number)\n    {\n        this.uniforms.blur = value;\n    }\n\n    /**\n     * The strength of the gradient blur.\n     *\n     * @memberof TiltShiftAxisFilter#\n     */\n    get gradientBlur(): number\n    {\n        return this.uniforms.gradientBlur;\n    }\n    set gradientBlur(value: number)\n    {\n        this.uniforms.gradientBlur = value;\n    }\n\n    /**\n     * The X value to start the effect at.\n     *\n     * @member {PIXI.Point}\n     * @memberof TiltShiftAxisFilter#\n     */\n    get start(): Point\n    {\n        return this.uniforms.start;\n    }\n    set start(value: Point)\n    {\n        this.uniforms.start = value;\n        this.updateDelta();\n    }\n\n    /**\n     * The X value to end the effect at.\n     *\n     * @member {PIXI.Point}\n     * @memberof TiltShiftAxisFilter#\n     */\n    get end(): Point\n    {\n        return this.uniforms.end;\n    }\n    set end(value: Point)\n    {\n        this.uniforms.end = value;\n        this.updateDelta();\n    }\n}\n\nexport { TiltShiftAxisFilter };\n","import { TiltShiftAxisFilter } from './TiltShiftAxisFilter';\n\n// @author Vico @vicocotea\n// original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js\n// by Evan Wallace : http://madebyevan.com/\n\n/**\n * A TiltShiftXFilter.\n *\n * @class\n * @extends PIXI.TiltShiftAxisFilter\n * @private\n */\nclass TiltShiftXFilter extends TiltShiftAxisFilter\n{\n    /**\n     * Updates the filter delta values.\n     */\n    protected updateDelta(): void\n    {\n        const dx = this.uniforms.end.x - this.uniforms.start.x;\n        const dy = this.uniforms.end.y - this.uniforms.start.y;\n        const d = Math.sqrt((dx * dx) + (dy * dy));\n\n        this.uniforms.delta.x = dx / d;\n        this.uniforms.delta.y = dy / d;\n    }\n}\n\nexport { TiltShiftXFilter };\n","import { TiltShiftAxisFilter } from './TiltShiftAxisFilter';\n\n// @author Vico @vicocotea\n// original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js\n// by Evan Wallace : http://madebyevan.com/\n\n/**\n * A TiltShiftYFilter.\n *\n * @class\n * @extends PIXI.TiltShiftAxisFilter\n * @private\n */\nclass TiltShiftYFilter extends TiltShiftAxisFilter\n{\n    /**\n     * Updates the filter delta values.\n     */\n    protected updateDelta(): void\n    {\n        const dx = this.uniforms.end.x - this.uniforms.start.x;\n        const dy = this.uniforms.end.y - this.uniforms.start.y;\n        const d = Math.sqrt((dx * dx) + (dy * dy));\n\n        this.uniforms.delta.x = -dy / d;\n        this.uniforms.delta.y = dx / d;\n    }\n}\n\nexport { TiltShiftYFilter };\n","import { TiltShiftXFilter } from './TiltShiftXFilter';\nimport { TiltShiftYFilter } from './TiltShiftYFilter';\nimport { Filter, FilterSystem, RenderTexture } from '@pixi/core';\nimport type { Point, CLEAR_MODES } from '@pixi/core';\n\n// @author Vico @vicocotea\n// original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js\n// by Evan Wallace : http://madebyevan.com/\n\n/**\n * A TiltShift Filter. Manages the pass of both a TiltShiftXFilter and TiltShiftYFilter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/tilt-shift.png)\n *\n * @class\n * @extends PIXI.Filter\n * @see {@link https://www.npmjs.com/package/@pixi/filter-tilt-shift|@pixi/filter-tilt-shift}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n */\nclass TiltShiftFilter extends Filter\n{\n    private tiltShiftXFilter: TiltShiftXFilter;\n    private tiltShiftYFilter: TiltShiftYFilter;\n\n    /**\n     * @param {number} [blur=100] - The strength of the blur.\n     * @param {number} [gradientBlur=600] - The strength of the gradient blur.\n     * @param {PIXI.Point} [start=null] - The Y value to start the effect at.\n     * @param {PIXI.Point} [end=null] - The Y value to end the effect at.\n     */\n    constructor(blur = 100, gradientBlur = 600, start?: Point, end?: Point)\n    {\n        super();\n        this.tiltShiftXFilter = new TiltShiftXFilter(blur, gradientBlur, start, end);\n        this.tiltShiftYFilter = new TiltShiftYFilter(blur, gradientBlur, start, end);\n    }\n\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES): void\n    {\n        const renderTarget = filterManager.getFilterTexture();\n\n        this.tiltShiftXFilter.apply(filterManager, input, renderTarget, 1);\n        this.tiltShiftYFilter.apply(filterManager, renderTarget, output, clearMode);\n        filterManager.returnFilterTexture(renderTarget);\n    }\n\n    /**\n     * The strength of the blur.\n     */\n    get blur(): number\n    {\n        return this.tiltShiftXFilter.blur;\n    }\n    set blur(value: number)\n    {\n        this.tiltShiftXFilter.blur = this.tiltShiftYFilter.blur = value;\n    }\n\n    /**\n     * The strength of the gradient blur.\n     */\n    get gradientBlur(): number\n    {\n        return this.tiltShiftXFilter.gradientBlur;\n    }\n    set gradientBlur(value: number)\n    {\n        this.tiltShiftXFilter.gradientBlur = this.tiltShiftYFilter.gradientBlur = value;\n    }\n\n    /**\n     * The Y value to start the effect at.\n     *\n     * @member {PIXI.Point}\n     */\n    get start(): Point\n    {\n        return this.tiltShiftXFilter.start;\n    }\n    set start(value: Point)\n    {\n        this.tiltShiftXFilter.start = this.tiltShiftYFilter.start = value;\n    }\n\n    /**\n     * The Y value to end the effect at.\n     *\n     * @member {PIXI.Point}\n     */\n    get end(): Point\n    {\n        return this.tiltShiftXFilter.end;\n    }\n    set end(value: Point)\n    {\n        this.tiltShiftXFilter.end = this.tiltShiftYFilter.end = value;\n    }\n}\n\nexport { TiltShiftFilter };\n\n"],"names":["TiltShiftAxisFilter","Filter","blur","gradientBlur","start","end","vertex","fragment","Point","value","TiltShiftXFilter","dx","dy","d","TiltShiftYFilter","TiltShiftFilter","filterManager","input","output","clearMode","renderTarget"],"mappings":"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"}