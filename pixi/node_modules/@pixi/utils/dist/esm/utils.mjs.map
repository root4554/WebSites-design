{"version":3,"file":"utils.mjs","sources":["../../src/url.ts","../../src/path.ts","../../src/settings.ts","../../src/browser/hello.ts","../../src/browser/isWebGLSupported.ts","../../src/color/hex.ts","../../src/color/premultiply.ts","../../src/data/createIndicesForQuads.ts","../../src/data/getBufferType.ts","../../src/data/interleaveTypedArrays.ts","../../src/data/pow2.ts","../../src/data/removeItems.ts","../../src/data/sign.ts","../../src/data/uid.ts","../../src/logging/deprecation.ts","../../src/media/caches.ts","../../src/media/CanvasRenderTarget.ts","../../src/media/trimCanvas.ts","../../src/const.ts","../../src/network/decomposeDataUri.ts","../../src/network/determineCrossOrigin.ts","../../src/network/getResolutionOfUrl.ts"],"sourcesContent":["/**\n * This file contains redeclared types for Node `url` and `querystring` modules. These modules\n * don't provide their own typings but instead are a part of the full Node typings. The purpose of\n * this file is to redeclare the required types to avoid having the whole Node types as a\n * dependency.\n */\n\nimport { parse as _parse, format as _format, resolve as _resolve } from 'url';\n\ninterface ParsedUrlQuery\n{\n    [key: string]: string | string[];\n}\n\ninterface ParsedUrlQueryInput\n{\n    [key: string]: unknown;\n}\n\ninterface UrlObjectCommon\n{\n    auth?: string;\n    hash?: string;\n    host?: string;\n    hostname?: string;\n    href?: string;\n    path?: string;\n    pathname?: string;\n    protocol?: string;\n    search?: string;\n    slashes?: boolean;\n}\n\n// Input to `url.format`\ninterface UrlObject extends UrlObjectCommon\n{\n    port?: string | number;\n    query?: string | null | ParsedUrlQueryInput;\n}\n\n// Output of `url.parse`\ninterface Url extends UrlObjectCommon\n{\n    port?: string;\n    query?: string | null | ParsedUrlQuery;\n}\n\ninterface UrlWithParsedQuery extends Url\n{\n    query: ParsedUrlQuery;\n}\n\ninterface UrlWithStringQuery extends Url\n{\n    query: string | null;\n}\n\ninterface URLFormatOptions\n{\n    auth?: boolean;\n    fragment?: boolean;\n    search?: boolean;\n    unicode?: boolean;\n}\n\ntype ParseFunction = {\n    (urlStr: string): UrlWithStringQuery;\n    (urlStr: string, parseQueryString: false | undefined, slashesDenoteHost?: boolean): UrlWithStringQuery;\n    (urlStr: string, parseQueryString: true, slashesDenoteHost?: boolean): UrlWithParsedQuery;\n    (urlStr: string, parseQueryString: boolean, slashesDenoteHost?: boolean): Url;\n};\n\ntype FormatFunction = {\n    (URL: URL, options?: URLFormatOptions): string;\n    (urlObject: UrlObject | string): string;\n};\n\ntype ResolveFunction = {\n    (from: string, to: string): string;\n};\n\nexport const url = {\n    parse: _parse as ParseFunction,\n    format: _format as FormatFunction,\n    resolve: _resolve as ResolveFunction,\n};\n","import { settings } from '@pixi/settings';\n\nfunction assertPath(path: string)\n{\n    if (typeof path !== 'string')\n    {\n        throw new TypeError(`Path must be a string. Received ${JSON.stringify(path)}`);\n    }\n}\n\nfunction removeUrlParams(url: string): string\n{\n    const re = url.split('?')[0];\n\n    return re.split('#')[0];\n}\n\nfunction escapeRegExp(string: string)\n{\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nfunction replaceAll(str: string, find: string, replace: string)\n{\n    return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path: string, allowAboveRoot: boolean)\n{\n    let res = '';\n    let lastSegmentLength = 0;\n    let lastSlash = -1;\n    let dots = 0;\n    let code: number;\n\n    for (let i = 0; i <= path.length; ++i)\n    {\n        if (i < path.length)\n        {\n            code = path.charCodeAt(i);\n        }\n        else if (code === 47)\n        {\n            break;\n        }\n        else\n        {\n            code = 47;\n        }\n        if (code === 47)\n        {\n            if (lastSlash === i - 1 || dots === 1)\n            {\n                // NOOP\n            }\n            else if (lastSlash !== i - 1 && dots === 2)\n            {\n                if (\n                    res.length < 2\n                    || lastSegmentLength !== 2\n                    || res.charCodeAt(res.length - 1) !== 46\n                    || res.charCodeAt(res.length - 2) !== 46\n                )\n                {\n                    if (res.length > 2)\n                    {\n                        const lastSlashIndex = res.lastIndexOf('/');\n\n                        if (lastSlashIndex !== res.length - 1)\n                        {\n                            if (lastSlashIndex === -1)\n                            {\n                                res = '';\n                                lastSegmentLength = 0;\n                            }\n                            else\n                            {\n                                res = res.slice(0, lastSlashIndex);\n                                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n                            }\n                            lastSlash = i;\n                            dots = 0;\n                            continue;\n                        }\n                    }\n                    else if (res.length === 2 || res.length === 1)\n                    {\n                        res = '';\n                        lastSegmentLength = 0;\n                        lastSlash = i;\n                        dots = 0;\n                        continue;\n                    }\n                }\n                if (allowAboveRoot)\n                {\n                    if (res.length > 0)\n                    { res += '/..'; }\n                    else\n                    { res = '..'; }\n                    lastSegmentLength = 2;\n                }\n            }\n            else\n            {\n                if (res.length > 0)\n                {\n                    res += `/${path.slice(lastSlash + 1, i)}`;\n                }\n                else\n                {\n                    res = path.slice(lastSlash + 1, i);\n                }\n                lastSegmentLength = i - lastSlash - 1;\n            }\n            lastSlash = i;\n            dots = 0;\n        }\n        else if (code === 46 && dots !== -1)\n        {\n            ++dots;\n        }\n        else\n        {\n            dots = -1;\n        }\n    }\n\n    return res;\n}\n\nexport interface Path\n{\n    toPosix: (path: string) => string;\n    toAbsolute: (url: string, baseUrl?: string, rootUrl?: string) => string;\n    isUrl: (path: string) => boolean;\n    isDataUrl: (path: string) => boolean;\n    hasProtocol: (path: string) => boolean;\n    getProtocol: (path: string) => string;\n    normalize: (path: string) => string;\n    join: (...paths: string[]) => string;\n    isAbsolute: (path: string) => boolean;\n    dirname: (path: string) => string;\n    rootname: (path: string) => string;\n    basename: (path: string, ext?: string) => string;\n    extname: (path: string) => string;\n    parse: (path: string) => { root?: string, dir?: string, base?: string, ext?: string, name?: string };\n    sep: string,\n    delimiter: string\n}\n\nexport const path: Path = {\n    /**\n     * Converts a path to posix format.\n     * @param path - The path to convert to posix\n     */\n    toPosix(path: string) { return replaceAll(path, '\\\\', '/'); },\n    /**\n     * Checks if the path is a URL\n     * @param path - The path to check\n     */\n    isUrl(path: string) { return (/^https?:/).test(this.toPosix(path)); },\n    /**\n     * Checks if the path is a data URL\n     * @param path - The path to check\n     */\n    isDataUrl(path: string)\n    {\n        // eslint-disable-next-line max-len\n        return (/^data:([a-z]+\\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}()_|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s<>]*?)$/i)\n            .test(path);\n    },\n    /**\n     * Checks if the path has a protocol e.g. http://\n     * This will return true for windows file paths\n     * @param path - The path to check\n     */\n    hasProtocol(path: string) { return (/^[^/:]+:\\//).test(this.toPosix(path)); },\n    /**\n     * Returns the protocol of the path e.g. http://, C:/, file:///\n     * @param path - The path to get the protocol from\n     */\n    getProtocol(path: string)\n    {\n        assertPath(path);\n        path = this.toPosix(path);\n\n        let protocol = '';\n\n        const isFile = (/^file:\\/\\/\\//).exec(path);\n        const isHttp = (/^[^/:]+:\\/\\//).exec(path);\n        const isWindows = (/^[^/:]+:\\//).exec(path);\n\n        if (isFile || isHttp || isWindows)\n        {\n            const arr = isFile?.[0] || isHttp?.[0] || isWindows?.[0];\n\n            protocol = arr;\n            path = path.slice(arr.length);\n        }\n\n        return protocol;\n    },\n\n    /**\n     * Converts URL to an absolute path.\n     * When loading from a Web Worker, we must use absolute paths.\n     * If the URL is already absolute we return it as is\n     * If it's not, we convert it\n     * @param url - The URL to test\n     * @param customBaseUrl - The base URL to use\n     * @param customRootUrl - The root URL to use\n     */\n    toAbsolute(url: string, customBaseUrl?: string, customRootUrl?: string)\n    {\n        if (this.isDataUrl(url)) return url;\n\n        const baseUrl = removeUrlParams(this.toPosix(customBaseUrl ?? settings.ADAPTER.getBaseUrl()));\n        const rootUrl = removeUrlParams(this.toPosix(customRootUrl ?? this.rootname(baseUrl)));\n\n        assertPath(url);\n        url = this.toPosix(url);\n\n        // root relative url\n        if (url.startsWith('/'))\n        {\n            return path.join(rootUrl, url.slice(1));\n        }\n\n        const absolutePath = this.isAbsolute(url) ? url : this.join(baseUrl, url);\n\n        return absolutePath;\n    },\n\n    /**\n     * Normalizes the given path, resolving '..' and '.' segments\n     * @param path - The path to normalize\n     */\n    normalize(path: string)\n    {\n        path = this.toPosix(path);\n        assertPath(path);\n\n        if (path.length === 0) return '.';\n\n        let protocol = '';\n        const isAbsolute = path.startsWith('/');\n\n        if (this.hasProtocol(path))\n        {\n            protocol = this.rootname(path);\n            path = path.slice(protocol.length);\n        }\n\n        const trailingSeparator = path.endsWith('/');\n\n        // Normalize the path\n        path = normalizeStringPosix(path, false);\n\n        if (path.length > 0 && trailingSeparator) path += '/';\n        if (isAbsolute) return `/${path}`;\n\n        return protocol + path;\n    },\n\n    /**\n     * Determines if path is an absolute path.\n     * Absolute paths can be urls, data urls, or paths on disk\n     * @param path - The path to test\n     */\n    isAbsolute(path: string)\n    {\n        assertPath(path);\n        path = this.toPosix(path);\n\n        if (this.hasProtocol(path)) return true;\n\n        return path.startsWith('/');\n    },\n\n    /**\n     * Joins all given path segments together using the platform-specific separator as a delimiter,\n     * then normalizes the resulting path\n     * @param segments - The segments of the path to join\n     */\n    join(...segments: string[])\n    {\n        if (segments.length === 0)\n        { return '.'; }\n        let joined;\n\n        for (let i = 0; i < segments.length; ++i)\n        {\n            const arg = segments[i];\n\n            assertPath(arg);\n            if (arg.length > 0)\n            {\n                if (joined === undefined) joined = arg;\n                else\n                {\n                    const prevArg = segments[i - 1] ?? '';\n\n                    if (this.extname(prevArg))\n                    {\n                        joined += `/../${arg}`;\n                    }\n                    else\n                    {\n                        joined += `/${arg}`;\n                    }\n                }\n            }\n        }\n        if (joined === undefined) { return '.'; }\n\n        return this.normalize(joined);\n    },\n\n    /**\n     * Returns the directory name of a path\n     * @param path - The path to parse\n     */\n    dirname(path: string)\n    {\n        assertPath(path);\n        if (path.length === 0) return '.';\n        path = this.toPosix(path);\n        let code = path.charCodeAt(0);\n        const hasRoot = code === 47;\n        let end = -1;\n        let matchedSlash = true;\n\n        const proto = this.getProtocol(path);\n        const origpath = path;\n\n        path = path.slice(proto.length);\n\n        for (let i = path.length - 1; i >= 1; --i)\n        {\n            code = path.charCodeAt(i);\n            if (code === 47)\n            {\n                if (!matchedSlash)\n                {\n                    end = i;\n                    break;\n                }\n            }\n            else\n            {\n                // We saw the first non-path separator\n                matchedSlash = false;\n            }\n        }\n\n        // if end is -1 and its a url then we need to add the path back\n        // eslint-disable-next-line no-nested-ternary\n        if (end === -1) return hasRoot ? '/' : this.isUrl(origpath) ? proto + path : proto;\n        if (hasRoot && end === 1) return '//';\n\n        return proto + path.slice(0, end);\n    },\n\n    /**\n     * Returns the root of the path e.g. /, C:/, file:///, http://domain.com/\n     * @param path - The path to parse\n     */\n    rootname(path: string)\n    {\n        assertPath(path);\n        path = this.toPosix(path);\n\n        let root = '';\n\n        if (path.startsWith('/')) root = '/';\n        else\n        {\n            root = this.getProtocol(path);\n        }\n\n        if (this.isUrl(path))\n        {\n            // need to find the first path separator\n            const index = path.indexOf('/', root.length);\n\n            if (index !== -1)\n            {\n                root = path.slice(0, index);\n            }\n            else root = path;\n\n            if (!root.endsWith('/')) root += '/';\n        }\n\n        return root;\n    },\n\n    /**\n     * Returns the last portion of a path\n     * @param path - The path to test\n     * @param ext - Optional extension to remove\n     */\n    basename(path: string, ext?: string)\n    {\n        assertPath(path);\n        if (ext) assertPath(ext);\n\n        path = this.toPosix(path);\n\n        let start = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i: number;\n\n        if (ext !== undefined && ext.length > 0 && ext.length <= path.length)\n        {\n            if (ext.length === path.length && ext === path) return '';\n            let extIdx = ext.length - 1;\n            let firstNonSlashEnd = -1;\n\n            for (i = path.length - 1; i >= 0; --i)\n            {\n                const code = path.charCodeAt(i);\n\n                if (code === 47)\n                {\n                    // If we reached a path separator that was not part of a set of path\n                    // separators at the end of the string, stop now\n                    if (!matchedSlash)\n                    {\n                        start = i + 1;\n                        break;\n                    }\n                }\n                else\n                {\n                    if (firstNonSlashEnd === -1)\n                    {\n                        // We saw the first non-path separator, remember this index in case\n                        // we need it if the extension ends up not matching\n                        matchedSlash = false;\n                        firstNonSlashEnd = i + 1;\n                    }\n                    if (extIdx >= 0)\n                    {\n                        // Try to match the explicit extension\n                        if (code === ext.charCodeAt(extIdx))\n                        {\n                            if (--extIdx === -1)\n                            {\n                                // We matched the extension, so mark this as the end of our path\n                                // component\n                                end = i;\n                            }\n                        }\n                        else\n                        {\n                            // Extension does not match, so our result is the entire path\n                            // component\n                            extIdx = -1;\n                            end = firstNonSlashEnd;\n                        }\n                    }\n                }\n            }\n\n            if (start === end) end = firstNonSlashEnd; else if (end === -1) end = path.length;\n\n            return path.slice(start, end);\n        }\n        for (i = path.length - 1; i >= 0; --i)\n        {\n            if (path.charCodeAt(i) === 47)\n            {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash)\n                {\n                    start = i + 1;\n                    break;\n                }\n            }\n            else if (end === -1)\n            {\n                // We saw the first non-path separator, mark this as the end of our\n                // path component\n                matchedSlash = false;\n                end = i + 1;\n            }\n        }\n\n        if (end === -1) return '';\n\n        return path.slice(start, end);\n    },\n\n    /**\n     * Returns the extension of the path, from the last occurrence of the . (period) character to end of string in the last\n     * portion of the path. If there is no . in the last portion of the path, or if there are no . characters other than\n     * the first character of the basename of path, an empty string is returned.\n     * @param path - The path to parse\n     */\n    extname(path: string)\n    {\n        assertPath(path);\n        path = this.toPosix(path);\n\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n\n        for (let i = path.length - 1; i >= 0; --i)\n        {\n            const code = path.charCodeAt(i);\n\n            if (code === 47)\n            {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash)\n                {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1)\n            {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === 46)\n            {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) startDot = i;\n                else if (preDotState !== 1) preDotState = 1;\n            }\n            else if (startDot !== -1)\n            {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n\n        if (\n            startDot === -1 || end === -1\n            // We saw a non-dot character immediately before the dot\n            || preDotState === 0\n            // The (right-most) trimmed path component is exactly '..'\n            // eslint-disable-next-line no-mixed-operators\n            || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1\n        )\n        {\n            return '';\n        }\n\n        return path.slice(startDot, end);\n    },\n\n    /**\n     * Parses a path into an object containing the 'root', `dir`, `base`, `ext`, and `name` properties.\n     * @param path - The path to parse\n     */\n    parse(path: string)\n    {\n        assertPath(path);\n\n        const ret = { root: '', dir: '', base: '', ext: '', name: '' };\n\n        if (path.length === 0) return ret;\n        path = this.toPosix(path);\n\n        let code = path.charCodeAt(0);\n        const isAbsolute = this.isAbsolute(path);\n        let start: number;\n        const protocol = '';\n\n        ret.root = this.rootname(path);\n\n        if (isAbsolute || this.hasProtocol(path))\n        {\n            start = 1;\n        }\n        else\n        {\n            start = 0;\n        }\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i = path.length - 1;\n\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n\n        // Get non-dir info\n        for (; i >= start; --i)\n        {\n            code = path.charCodeAt(i);\n            if (code === 47)\n            {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash)\n                {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1)\n            {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === 46)\n            {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) startDot = i;\n                else if (preDotState !== 1) preDotState = 1;\n            }\n            else if (startDot !== -1)\n            {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n\n        if (\n            startDot === -1 || end === -1\n            // We saw a non-dot character immediately before the dot\n            || preDotState === 0\n            // The (right-most) trimmed path component is exactly '..'\n            // eslint-disable-next-line no-mixed-operators\n            || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1\n        )\n        {\n            if (end !== -1)\n            {\n                if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);\n                else ret.base = ret.name = path.slice(startPart, end);\n            }\n        }\n        else\n        {\n            if (startPart === 0 && isAbsolute)\n            {\n                ret.name = path.slice(1, startDot);\n                ret.base = path.slice(1, end);\n            }\n            else\n            {\n                ret.name = path.slice(startPart, startDot);\n                ret.base = path.slice(startPart, end);\n            }\n            ret.ext = path.slice(startDot, end);\n        }\n\n        ret.dir = this.dirname(path);\n        if (protocol) ret.dir = protocol + ret.dir;\n\n        return ret;\n    },\n\n    sep: '/',\n    delimiter: ':'\n} as Path;\n","import { settings } from '@pixi/settings';\n\n/**\n * The prefix that denotes a URL is for a retina asset.\n * @static\n * @name RETINA_PREFIX\n * @memberof PIXI.settings\n * @type {RegExp}\n * @default /@([0-9\\.]+)x/\n * @example `@2x`\n */\nsettings.RETINA_PREFIX = /@([0-9\\.]+)x/;\n\n/**\n * Should the `failIfMajorPerformanceCaveat` flag be enabled as a context option used in the `isWebGLSupported` function.\n * If set to true, a WebGL renderer can fail to be created if the browser thinks there could be performance issues when\n * using WebGL.\n *\n * In PixiJS v6 this has changed from true to false by default, to allow WebGL to work in as many scenarios as possible.\n * However, some users may have a poor experience, for example, if a user has a gpu or driver version blacklisted by the\n * browser.\n *\n * If your application requires high performance rendering, you may wish to set this to false.\n * We recommend one of two options if you decide to set this flag to false:\n *\n * 1: Use the `pixi.js-legacy` package, which includes a Canvas renderer as a fallback in case high performance WebGL is\n *    not supported.\n *\n * 2: Call `isWebGLSupported` (which if found in the PIXI.utils package) in your code before attempting to create a PixiJS\n *    renderer, and show an error message to the user if the function returns false, explaining that their device & browser\n *    combination does not support high performance WebGL.\n *    This is a much better strategy than trying to create a PixiJS renderer and finding it then fails.\n * @static\n * @name FAIL_IF_MAJOR_PERFORMANCE_CAVEAT\n * @memberof PIXI.settings\n * @type {boolean}\n * @default false\n */\nsettings.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT = false;\n\nexport { settings };\n","import { settings } from '@pixi/settings';\n\nlet saidHello = false;\nconst VERSION = '$_VERSION';\n\n/**\n * Skips the hello message of renderers that are created after this is run.\n * @function skipHello\n * @memberof PIXI.utils\n */\nexport function skipHello(): void\n{\n    saidHello = true;\n}\n\n/**\n * Logs out the version and renderer information for this running instance of PIXI.\n * If you don't want to see this message you can run `PIXI.utils.skipHello()` before\n * creating your renderer. Keep in mind that doing that will forever make you a jerk face.\n * @static\n * @function sayHello\n * @memberof PIXI.utils\n * @param {string} type - The string renderer type to log.\n */\nexport function sayHello(type: string): void\n{\n    if (saidHello)\n    {\n        return;\n    }\n\n    if (settings.ADAPTER.getNavigator().userAgent.toLowerCase().indexOf('chrome') > -1)\n    {\n        const args = [\n            `\\n %c %c %c PixiJS ${VERSION} - ✰ ${type} ✰  %c  %c  http://www.pixijs.com/  %c %c ♥%c♥%c♥ \\n\\n`,\n            'background: #ff66a5; padding:5px 0;',\n            'background: #ff66a5; padding:5px 0;',\n            'color: #ff66a5; background: #030307; padding:5px 0;',\n            'background: #ff66a5; padding:5px 0;',\n            'background: #ffc3dc; padding:5px 0;',\n            'background: #ff66a5; padding:5px 0;',\n            'color: #ff2424; background: #fff; padding:5px 0;',\n            'color: #ff2424; background: #fff; padding:5px 0;',\n            'color: #ff2424; background: #fff; padding:5px 0;',\n        ];\n\n        globalThis.console.log(...args);\n    }\n    else if (globalThis.console)\n    {\n        globalThis.console.log(`PixiJS ${VERSION} - ${type} - http://www.pixijs.com/`);\n    }\n\n    saidHello = true;\n}\n","import { settings } from '../settings';\n\nlet supported: boolean | undefined;\n\n/**\n * Helper for checking for WebGL support.\n * @memberof PIXI.utils\n * @function isWebGLSupported\n * @returns {boolean} Is WebGL supported.\n */\nexport function isWebGLSupported(): boolean\n{\n    if (typeof supported === 'undefined')\n    {\n        supported = (function supported(): boolean\n        {\n            const contextOptions = {\n                stencil: true,\n                failIfMajorPerformanceCaveat: settings.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT,\n            };\n\n            try\n            {\n                if (!settings.ADAPTER.getWebGLRenderingContext())\n                {\n                    return false;\n                }\n\n                const canvas = settings.ADAPTER.createCanvas();\n                let gl = (\n                    canvas.getContext('webgl', contextOptions)\n                    || canvas.getContext('experimental-webgl', contextOptions)\n                ) as WebGLRenderingContext;\n\n                const success = !!(gl && gl.getContextAttributes().stencil);\n\n                if (gl)\n                {\n                    const loseContext = gl.getExtension('WEBGL_lose_context');\n\n                    if (loseContext)\n                    {\n                        loseContext.loseContext();\n                    }\n                }\n\n                gl = null;\n\n                return success;\n            }\n            catch (e)\n            {\n                return false;\n            }\n        })();\n    }\n\n    return supported;\n}\n","import { default as cssColorNames } from 'css-color-names';\n\n/**\n * Converts a hexadecimal color number to an [R, G, B] array of normalized floats (numbers from 0.0 to 1.0).\n * @example\n * PIXI.utils.hex2rgb(0xffffff); // returns [1, 1, 1]\n * @memberof PIXI.utils\n * @function hex2rgb\n * @param {number} hex - The hexadecimal number to convert\n * @param  {number[]} [out=[]] - If supplied, this array will be used rather than returning a new one\n * @returns {number[]} An array representing the [R, G, B] of the color where all values are floats.\n */\nexport function hex2rgb(hex: number, out: Array<number> | Float32Array = []): Array<number> | Float32Array\n{\n    out[0] = ((hex >> 16) & 0xFF) / 255;\n    out[1] = ((hex >> 8) & 0xFF) / 255;\n    out[2] = (hex & 0xFF) / 255;\n\n    return out;\n}\n\n/**\n * Converts a hexadecimal color number to a string.\n * @example\n * PIXI.utils.hex2string(0xffffff); // returns \"#ffffff\"\n * @memberof PIXI.utils\n * @function hex2string\n * @param {number} hex - Number in hex (e.g., `0xffffff`)\n * @returns {string} The string color (e.g., `\"#ffffff\"`).\n */\nexport function hex2string(hex: number): string\n{\n    let hexString = hex.toString(16);\n\n    hexString = '000000'.substring(0, 6 - hexString.length) + hexString;\n\n    return `#${hexString}`;\n}\n\n/**\n * Converts a string to a hexadecimal color number.\n * It can handle:\n *  hex strings starting with #: \"#ffffff\"\n *  hex strings starting with 0x: \"0xffffff\"\n *  hex strings without prefix: \"ffffff\"\n *  css colors: \"black\"\n * @example\n * PIXI.utils.string2hex(\"#ffffff\"); // returns 0xffffff\n * @memberof PIXI.utils\n * @function string2hex\n * @param {string} string - The string color (e.g., `\"#ffffff\"`)\n * @returns {number} Number in hexadecimal.\n */\nexport function string2hex(string: string): number\n{\n    if (typeof string === 'string')\n    {\n        string = (cssColorNames as {[key: string]: string})[string.toLowerCase()] || string;\n\n        if (string[0] === '#')\n        {\n            string = string.slice(1);\n        }\n    }\n\n    return parseInt(string, 16);\n}\n\n/**\n * Converts a color as an [R, G, B] array of normalized floats to a hexadecimal number.\n * @example\n * PIXI.utils.rgb2hex([1, 1, 1]); // returns 0xffffff\n * @memberof PIXI.utils\n * @function rgb2hex\n * @param {number[]} rgb - Array of numbers where all values are normalized floats from 0.0 to 1.0.\n * @returns {number} Number in hexadecimal.\n */\nexport function rgb2hex(rgb: number[] | Float32Array): number\n{\n    return (((rgb[0] * 255) << 16) + ((rgb[1] * 255) << 8) + (rgb[2] * 255 | 0));\n}\n","import { BLEND_MODES } from '@pixi/constants';\n\n/**\n * Corrects PixiJS blend, takes premultiplied alpha into account\n * @memberof PIXI.utils\n * @function mapPremultipliedBlendModes\n * @private\n * @returns {Array<number[]>} Mapped modes.\n */\nfunction mapPremultipliedBlendModes(): number[][]\n{\n    const pm = [];\n    const npm = [];\n\n    for (let i = 0; i < 32; i++)\n    {\n        pm[i] = i;\n        npm[i] = i;\n    }\n\n    pm[BLEND_MODES.NORMAL_NPM] = BLEND_MODES.NORMAL;\n    pm[BLEND_MODES.ADD_NPM] = BLEND_MODES.ADD;\n    pm[BLEND_MODES.SCREEN_NPM] = BLEND_MODES.SCREEN;\n\n    npm[BLEND_MODES.NORMAL] = BLEND_MODES.NORMAL_NPM;\n    npm[BLEND_MODES.ADD] = BLEND_MODES.ADD_NPM;\n    npm[BLEND_MODES.SCREEN] = BLEND_MODES.SCREEN_NPM;\n\n    const array: number[][] = [];\n\n    array.push(npm);\n    array.push(pm);\n\n    return array;\n}\n\n/**\n * maps premultiply flag and blendMode to adjusted blendMode\n * @memberof PIXI.utils\n * @constant premultiplyBlendMode\n * @type {Array<number[]>}\n */\nexport const premultiplyBlendMode = mapPremultipliedBlendModes();\n\n/**\n * changes blendMode according to texture format\n * @memberof PIXI.utils\n * @function correctBlendMode\n * @param {number} blendMode - supposed blend mode\n * @param {boolean} premultiplied - whether source is premultiplied\n * @returns {number} true blend mode for this texture\n */\nexport function correctBlendMode(blendMode: number, premultiplied: boolean): number\n{\n    return premultiplyBlendMode[premultiplied ? 1 : 0][blendMode];\n}\n\n/**\n * combines rgb and alpha to out array\n * @memberof PIXI.utils\n * @function premultiplyRgba\n * @param {Float32Array|number[]} rgb - input rgb\n * @param {number} alpha - alpha param\n * @param {Float32Array} [out] - output\n * @param {boolean} [premultiply=true] - do premultiply it\n * @returns {Float32Array} vec4 rgba\n */\nexport function premultiplyRgba(\n    rgb: Float32Array | number[],\n    alpha: number,\n    out?: Float32Array,\n    premultiply?: boolean\n): Float32Array\n{\n    out = out || new Float32Array(4);\n    if (premultiply || premultiply === undefined)\n    {\n        out[0] = rgb[0] * alpha;\n        out[1] = rgb[1] * alpha;\n        out[2] = rgb[2] * alpha;\n    }\n    else\n    {\n        out[0] = rgb[0];\n        out[1] = rgb[1];\n        out[2] = rgb[2];\n    }\n    out[3] = alpha;\n\n    return out;\n}\n\n/**\n * premultiplies tint\n * @memberof PIXI.utils\n * @function premultiplyTint\n * @param {number} tint - integer RGB\n * @param {number} alpha - floating point alpha (0.0-1.0)\n * @returns {number} tint multiplied by alpha\n */\nexport function premultiplyTint(tint: number, alpha: number): number\n{\n    if (alpha === 1.0)\n    {\n        return (alpha * 255 << 24) + tint;\n    }\n    if (alpha === 0.0)\n    {\n        return 0;\n    }\n    let R = ((tint >> 16) & 0xFF);\n    let G = ((tint >> 8) & 0xFF);\n    let B = (tint & 0xFF);\n\n    R = ((R * alpha) + 0.5) | 0;\n    G = ((G * alpha) + 0.5) | 0;\n    B = ((B * alpha) + 0.5) | 0;\n\n    return (alpha * 255 << 24) + (R << 16) + (G << 8) + B;\n}\n\n/**\n * converts integer tint and float alpha to vec4 form, premultiplies by default\n * @memberof PIXI.utils\n * @function premultiplyTintToRgba\n * @param {number} tint - input tint\n * @param {number} alpha - alpha param\n * @param {Float32Array} [out] - output\n * @param {boolean} [premultiply=true] - do premultiply it\n * @returns {Float32Array} vec4 rgba\n */\nexport function premultiplyTintToRgba(tint: number, alpha: number, out: Float32Array, premultiply?: boolean): Float32Array\n{\n    out = out || new Float32Array(4);\n    out[0] = ((tint >> 16) & 0xFF) / 255.0;\n    out[1] = ((tint >> 8) & 0xFF) / 255.0;\n    out[2] = (tint & 0xFF) / 255.0;\n    if (premultiply || premultiply === undefined)\n    {\n        out[0] *= alpha;\n        out[1] *= alpha;\n        out[2] *= alpha;\n    }\n    out[3] = alpha;\n\n    return out;\n}\n","/**\n * Generic Mask Stack data structure\n * @memberof PIXI.utils\n * @function createIndicesForQuads\n * @param {number} size - Number of quads\n * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`\n * @returns {Uint16Array|Uint32Array} - Resulting index buffer\n */\nexport function createIndicesForQuads(size: number, outBuffer: Uint16Array | Uint32Array = null): Uint16Array | Uint32Array\n{\n    // the total number of indices in our array, there are 6 points per quad.\n    const totalIndices = size * 6;\n\n    outBuffer = outBuffer || new Uint16Array(totalIndices);\n\n    if (outBuffer.length !== totalIndices)\n    {\n        throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n    }\n\n    // fill the indices with the quads to draw\n    for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4)\n    {\n        outBuffer[i + 0] = j + 0;\n        outBuffer[i + 1] = j + 1;\n        outBuffer[i + 2] = j + 2;\n        outBuffer[i + 3] = j + 0;\n        outBuffer[i + 4] = j + 2;\n        outBuffer[i + 5] = j + 3;\n    }\n\n    return outBuffer;\n}\n","import type { ITypedArray } from '@pixi/core';\n\nexport function getBufferType(\n    array: ITypedArray\n): 'Float32Array' | 'Uint32Array' | 'Int32Array' | 'Uint16Array' | 'Uint8Array' | null\n{\n    if (array.BYTES_PER_ELEMENT === 4)\n    {\n        if (array instanceof Float32Array)\n        {\n            return 'Float32Array';\n        }\n        else if (array instanceof Uint32Array)\n        {\n            return 'Uint32Array';\n        }\n\n        return 'Int32Array';\n    }\n    else if (array.BYTES_PER_ELEMENT === 2)\n    {\n        if (array instanceof Uint16Array)\n        {\n            return 'Uint16Array';\n        }\n    }\n    else if (array.BYTES_PER_ELEMENT === 1)\n    {\n        if (array instanceof Uint8Array)\n        {\n            return 'Uint8Array';\n        }\n    }\n\n    // TODO map out the rest of the array elements!\n    return null;\n}\n","import { getBufferType } from './getBufferType';\n\n/* eslint-disable object-shorthand */\nconst map = { Float32Array: Float32Array, Uint32Array: Uint32Array, Int32Array: Int32Array, Uint8Array: Uint8Array };\n\ntype PackedArray = Float32Array | Uint32Array | Int32Array | Uint8Array;\n\nexport function interleaveTypedArrays(arrays: PackedArray[], sizes: number[]): Float32Array\n{\n    let outSize = 0;\n    let stride = 0;\n    const views: {[key: string]: PackedArray} = {};\n\n    for (let i = 0; i < arrays.length; i++)\n    {\n        stride += sizes[i];\n        outSize += arrays[i].length;\n    }\n\n    const buffer = new ArrayBuffer(outSize * 4);\n\n    let out = null;\n    let littleOffset = 0;\n\n    for (let i = 0; i < arrays.length; i++)\n    {\n        const size = sizes[i];\n        const array = arrays[i];\n\n        /*\n        @todo This is unsafe casting but consistent with how the code worked previously. Should it stay this way\n              or should and `getBufferTypeUnsafe` function be exposed that throws an Error if unsupported type is passed?\n         */\n        const type = getBufferType(array) as keyof typeof map;\n\n        if (!views[type])\n        {\n            views[type] = new map[type](buffer);\n        }\n\n        out = views[type];\n\n        for (let j = 0; j < array.length; j++)\n        {\n            const indexStart = ((j / size | 0) * stride) + littleOffset;\n            const index = j % size;\n\n            out[indexStart + index] = array[j];\n        }\n\n        littleOffset += size;\n    }\n\n    return new Float32Array(buffer);\n}\n","// Taken from the bit-twiddle package\n\n/**\n * Rounds to next power of two.\n * @function nextPow2\n * @memberof PIXI.utils\n * @param {number} v - input value\n * @returns {number} - next rounded power of two\n */\nexport function nextPow2(v: number): number\n{\n    v += v === 0 ? 1 : 0;\n    --v;\n    v |= v >>> 1;\n    v |= v >>> 2;\n    v |= v >>> 4;\n    v |= v >>> 8;\n    v |= v >>> 16;\n\n    return v + 1;\n}\n\n/**\n * Checks if a number is a power of two.\n * @function isPow2\n * @memberof PIXI.utils\n * @param {number} v - input value\n * @returns {boolean} `true` if value is power of two\n */\nexport function isPow2(v: number): boolean\n{\n    return !(v & (v - 1)) && (!!v);\n}\n\n/**\n * Computes ceil of log base 2\n * @function log2\n * @memberof PIXI.utils\n * @param {number} v - input value\n * @returns {number} logarithm base 2\n */\nexport function log2(v: number): number\n{\n    let r = (v > 0xFFFF ? 1 : 0) << 4;\n\n    v >>>= r;\n\n    let shift = (v > 0xFF ? 1 : 0) << 3;\n\n    v >>>= shift; r |= shift;\n    shift = (v > 0xF ? 1 : 0) << 2;\n    v >>>= shift; r |= shift;\n    shift = (v > 0x3 ? 1 : 0) << 1;\n    v >>>= shift; r |= shift;\n\n    return r | (v >> 1);\n}\n","/**\n * Remove items from a javascript array without generating garbage\n * @function removeItems\n * @memberof PIXI.utils\n * @param {Array<any>} arr - Array to remove elements from\n * @param {number} startIdx - starting index\n * @param {number} removeCount - how many to remove\n */\nexport function removeItems(arr: any[], startIdx: number, removeCount: number): void\n{\n    const length = arr.length;\n    let i;\n\n    if (startIdx >= length || removeCount === 0)\n    {\n        return;\n    }\n\n    removeCount = (startIdx + removeCount > length ? length - startIdx : removeCount);\n\n    const len = length - removeCount;\n\n    for (i = startIdx; i < len; ++i)\n    {\n        arr[i] = arr[i + removeCount];\n    }\n\n    arr.length = len;\n}\n","/**\n * Returns sign of number\n * @memberof PIXI.utils\n * @function sign\n * @param {number} n - the number to check the sign of\n * @returns {number} 0 if `n` is 0, -1 if `n` is negative, 1 if `n` is positive\n */\nexport function sign(n: number): -1 | 0 | 1\n{\n    if (n === 0) return 0;\n\n    return n < 0 ? -1 : 1;\n}\n","let nextUid = 0;\n\n/**\n * Gets the next unique identifier\n * @memberof PIXI.utils\n * @function uid\n * @returns {number} The next unique identifier to use.\n */\nexport function uid(): number\n{\n    return ++nextUid;\n}\n","import type { Dict } from '../types';\n\n// A map of warning messages already fired\nconst warnings: Dict<boolean> = {};\n\n/**\n * Helper for warning developers about deprecated features & settings.\n * A stack track for warnings is given; useful for tracking-down where\n * deprecated methods/properties/classes are being used within the code.\n * @memberof PIXI.utils\n * @function deprecation\n * @param {string} version - The version where the feature became deprecated\n * @param {string} message - Message should include what is deprecated, where, and the new solution\n * @param {number} [ignoreDepth=3] - The number of steps to ignore at the top of the error stack\n *        this is mostly to ignore internal deprecation calls.\n */\nexport function deprecation(version: string, message: string, ignoreDepth = 3): void\n{\n    // Ignore duplicat\n    if (warnings[message])\n    {\n        return;\n    }\n\n    /* eslint-disable no-console */\n    let stack = new Error().stack;\n\n    // Handle IE < 10 and Safari < 6\n    if (typeof stack === 'undefined')\n    {\n        console.warn('PixiJS Deprecation Warning: ', `${message}\\nDeprecated since v${version}`);\n    }\n    else\n    {\n        // chop off the stack trace which includes PixiJS internal calls\n        stack = stack.split('\\n').splice(ignoreDepth).join('\\n');\n\n        if (console.groupCollapsed)\n        {\n            console.groupCollapsed(\n                '%cPixiJS Deprecation Warning: %c%s',\n                'color:#614108;background:#fffbe6',\n                'font-weight:normal;color:#614108;background:#fffbe6',\n                `${message}\\nDeprecated since v${version}`\n            );\n            console.warn(stack);\n            console.groupEnd();\n        }\n        else\n        {\n            console.warn('PixiJS Deprecation Warning: ', `${message}\\nDeprecated since v${version}`);\n            console.warn(stack);\n        }\n    }\n    /* eslint-enable no-console */\n\n    warnings[message] = true;\n}\n","import type { Program, Texture, BaseTexture } from '@pixi/core';\n\n/**\n * @todo Describe property usage\n * @static\n * @name ProgramCache\n * @memberof PIXI.utils\n * @type {object}\n */\nexport const ProgramCache: {[key: string]: Program} = {};\n\n/**\n * @todo Describe property usage\n * @static\n * @name TextureCache\n * @memberof PIXI.utils\n * @type {object}\n */\nexport const TextureCache: {[key: string]: Texture} = Object.create(null);\n\n/**\n * @todo Describe property usage\n * @static\n * @name BaseTextureCache\n * @memberof PIXI.utils\n * @type {object}\n */\nexport const BaseTextureCache: {[key: string]: BaseTexture} = Object.create(null);\n\n/**\n * Destroys all texture in the cache\n * @memberof PIXI.utils\n * @function destroyTextureCache\n */\nexport function destroyTextureCache(): void\n{\n    let key;\n\n    for (key in TextureCache)\n    {\n        TextureCache[key].destroy();\n    }\n    for (key in BaseTextureCache)\n    {\n        BaseTextureCache[key].destroy();\n    }\n}\n\n/**\n * Removes all textures from cache, but does not destroy them\n * @memberof PIXI.utils\n * @function clearTextureCache\n */\nexport function clearTextureCache(): void\n{\n    let key;\n\n    for (key in TextureCache)\n    {\n        delete TextureCache[key];\n    }\n    for (key in BaseTextureCache)\n    {\n        delete BaseTextureCache[key];\n    }\n}\n","import { settings } from '@pixi/settings';\n\n/**\n * Creates a Canvas element of the given size to be used as a target for rendering to.\n * @class\n * @memberof PIXI.utils\n */\nexport class CanvasRenderTarget\n{\n    /** The Canvas object that belongs to this CanvasRenderTarget. */\n    public canvas: HTMLCanvasElement;\n\n    /** A CanvasRenderingContext2D object representing a two-dimensional rendering context. */\n    public context: CanvasRenderingContext2D;\n\n    /**\n     * The resolution / device pixel ratio of the canvas\n     * @default 1\n     */\n    public resolution: number;\n\n    /**\n     * @param width - the width for the newly created canvas\n     * @param height - the height for the newly created canvas\n     * @param {number} [resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the canvas\n     */\n    constructor(width: number, height: number, resolution?: number)\n    {\n        this.canvas = settings.ADAPTER.createCanvas();\n\n        this.context = this.canvas.getContext('2d');\n\n        this.resolution = resolution || settings.RESOLUTION;\n\n        this.resize(width, height);\n    }\n\n    /**\n     * Clears the canvas that was created by the CanvasRenderTarget class.\n     * @private\n     */\n    clear(): void\n    {\n        this.context.setTransform(1, 0, 0, 1, 0, 0);\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    /**\n     * Resizes the canvas to the specified width and height.\n     * @param desiredWidth - the desired width of the canvas\n     * @param desiredHeight - the desired height of the canvas\n     */\n    resize(desiredWidth: number, desiredHeight: number): void\n    {\n        this.canvas.width = Math.round(desiredWidth * this.resolution);\n        this.canvas.height = Math.round(desiredHeight * this.resolution);\n    }\n\n    /** Destroys this canvas. */\n    destroy(): void\n    {\n        this.context = null;\n        this.canvas = null;\n    }\n\n    /**\n     * The width of the canvas buffer in pixels.\n     * @member {number}\n     */\n    get width(): number\n    {\n        return this.canvas.width;\n    }\n\n    set width(val: number)\n    {\n        this.canvas.width = Math.round(val);\n    }\n\n    /**\n     * The height of the canvas buffer in pixels.\n     * @member {number}\n     */\n    get height(): number\n    {\n        return this.canvas.height;\n    }\n\n    set height(val: number)\n    {\n        this.canvas.height = Math.round(val);\n    }\n}\n","interface Inset\n{\n    top?: number;\n    left?: number;\n    right?: number;\n    bottom?: number;\n}\n\n/**\n * Trim transparent borders from a canvas\n * @memberof PIXI.utils\n * @function trimCanvas\n * @param {HTMLCanvasElement} canvas - the canvas to trim\n * @returns {object} Trim data\n */\nexport function trimCanvas(canvas: HTMLCanvasElement): {width: number; height: number; data?: ImageData}\n{\n    // https://gist.github.com/remy/784508\n\n    let width = canvas.width;\n    let height = canvas.height;\n\n    const context = canvas.getContext('2d');\n    const imageData = context.getImageData(0, 0, width, height);\n    const pixels = imageData.data;\n    const len = pixels.length;\n\n    const bound: Inset = {\n        top: null,\n        left: null,\n        right: null,\n        bottom: null,\n    };\n    let data = null;\n    let i;\n    let x;\n    let y;\n\n    for (i = 0; i < len; i += 4)\n    {\n        if (pixels[i + 3] !== 0)\n        {\n            x = (i / 4) % width;\n            y = ~~((i / 4) / width);\n\n            if (bound.top === null)\n            {\n                bound.top = y;\n            }\n\n            if (bound.left === null)\n            {\n                bound.left = x;\n            }\n            else if (x < bound.left)\n            {\n                bound.left = x;\n            }\n\n            if (bound.right === null)\n            {\n                bound.right = x + 1;\n            }\n            else if (bound.right < x)\n            {\n                bound.right = x + 1;\n            }\n\n            if (bound.bottom === null)\n            {\n                bound.bottom = y;\n            }\n            else if (bound.bottom < y)\n            {\n                bound.bottom = y;\n            }\n        }\n    }\n\n    if (bound.top !== null)\n    {\n        width = bound.right - bound.left;\n        height = bound.bottom - bound.top + 1;\n        data = context.getImageData(bound.left, bound.top, width, height);\n    }\n\n    return {\n        height,\n        width,\n        data,\n    };\n}\n","/**\n * Regexp for data URI.\n * Based on: {@link https://github.com/ragingwind/data-uri-regex}\n * @static\n * @constant {RegExp|string} DATA_URI\n * @memberof PIXI\n * @example data:image/png;base64\n */\nexport const DATA_URI = /^\\s*data:(?:([\\w-]+)\\/([\\w+.-]+))?(?:;charset=([\\w-]+))?(?:;(base64))?,(.*)/i;\n","import { DATA_URI } from '../const';\n\nexport interface DecomposedDataUri\n{\n    mediaType: string;\n    subType: string;\n    charset: string;\n    encoding: string;\n    data: string;\n}\n\n/**\n * @memberof PIXI.utils\n * @interface DecomposedDataUri\n */\n\n/**\n * type, eg. `image`\n * @memberof PIXI.utils.DecomposedDataUri#\n * @member {string} mediaType\n */\n\n/**\n * Sub type, eg. `png`\n * @memberof PIXI.utils.DecomposedDataUri#\n * @member {string} subType\n */\n\n/**\n * @memberof PIXI.utils.DecomposedDataUri#\n * @member {string} charset\n */\n\n/**\n * Data encoding, eg. `base64`\n * @memberof PIXI.utils.DecomposedDataUri#\n * @member {string} encoding\n */\n\n/**\n * The actual data\n * @memberof PIXI.utils.DecomposedDataUri#\n * @member {string} data\n */\n\n/**\n * Split a data URI into components. Returns undefined if\n * parameter `dataUri` is not a valid data URI.\n * @memberof PIXI.utils\n * @function decomposeDataUri\n * @param {string} dataUri - the data URI to check\n * @returns {PIXI.utils.DecomposedDataUri|undefined} The decomposed data uri or undefined\n */\nexport function decomposeDataUri(dataUri: string): DecomposedDataUri\n{\n    const dataUriMatch = DATA_URI.exec(dataUri);\n\n    if (dataUriMatch)\n    {\n        return {\n            mediaType: dataUriMatch[1] ? dataUriMatch[1].toLowerCase() : undefined,\n            subType: dataUriMatch[2] ? dataUriMatch[2].toLowerCase() : undefined,\n            charset: dataUriMatch[3] ? dataUriMatch[3].toLowerCase() : undefined,\n            encoding: dataUriMatch[4] ? dataUriMatch[4].toLowerCase() : undefined,\n            data: dataUriMatch[5],\n        };\n    }\n\n    return undefined;\n}\n","import { url as _url } from '../url';\n\nlet tempAnchor: HTMLAnchorElement | undefined;\n\n/**\n * Sets the `crossOrigin` property for this resource based on if the url\n * for this resource is cross-origin. If crossOrigin was manually set, this\n * function does nothing.\n * Nipped from the resource loader!\n * @ignore\n * @param {string} url - The url to test.\n * @param {object} [loc=window.location] - The location object to test against.\n * @returns {string} The crossOrigin value to use (or empty string for none).\n */\nexport function determineCrossOrigin(url: string, loc: Location = globalThis.location): string\n{\n    // data: and javascript: urls are considered same-origin\n    if (url.startsWith('data:'))\n    {\n        return '';\n    }\n\n    // default is window.location\n    loc = loc || globalThis.location;\n\n    if (!tempAnchor)\n    {\n        tempAnchor = document.createElement('a');\n    }\n\n    // let the browser determine the full href for the url of this resource and then\n    // parse with the node url lib, we can't use the properties of the anchor element\n    // because they don't work in IE9 :(\n    tempAnchor.href = url;\n    const parsedUrl = _url.parse(tempAnchor.href);\n\n    const samePort = (!parsedUrl.port && loc.port === '') || (parsedUrl.port === loc.port);\n\n    // if cross origin\n    if (parsedUrl.hostname !== loc.hostname || !samePort || parsedUrl.protocol !== loc.protocol)\n    {\n        return 'anonymous';\n    }\n\n    return '';\n}\n","import { settings } from '../settings';\n\n/**\n * get the resolution / device pixel ratio of an asset by looking for the prefix\n * used by spritesheets and image urls\n * @memberof PIXI.utils\n * @function getResolutionOfUrl\n * @param {string} url - the image path\n * @param {number} [defaultValue=1] - the defaultValue if no filename prefix is set.\n * @returns {number} resolution / device pixel ratio of an asset\n */\nexport function getResolutionOfUrl(url: string, defaultValue = 1): number\n{\n    const resolution = settings.RETINA_PREFIX.exec(url);\n\n    if (resolution)\n    {\n        return parseFloat(resolution[1]);\n    }\n\n    return defaultValue;\n}\n"],"names":["_parse","_format","_resolve","url","_url"],"mappings":"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"}