{"version":3,"file":"ticker.min.mjs","sources":["../../src/settings.ts","../../src/const.ts","../../src/TickerListener.ts","../../src/Ticker.ts","../../src/TickerPlugin.ts"],"sourcesContent":["import { settings } from '@pixi/settings';\n\n/**\n * Target frames per millisecond.\n * @static\n * @name TARGET_FPMS\n * @memberof PIXI.settings\n * @type {number}\n * @default 0.06\n */\nsettings.TARGET_FPMS = 0.06;\n\nexport { settings };\n","/**\n * Represents the update priorities used by internal PIXI classes when registered with\n * the {@link PIXI.Ticker} object. Higher priority items are updated first and lower\n * priority items, such as render, should go later.\n * @static\n * @constant\n * @name UPDATE_PRIORITY\n * @memberof PIXI\n * @enum {number}\n * @property {number} [HIGH=25] High priority updating, {@link PIXI.VideoBaseTexture} and {@link PIXI.AnimatedSprite}\n * @property {number} [NORMAL=0] Default priority for ticker events, see {@link PIXI.Ticker#add}.\n * @property {number} [LOW=-25] Low priority used for {@link PIXI.Application} rendering.\n * @property {number} [UTILITY=-50] Lowest priority used for {@link PIXI.BasePrepare} utility.\n */\nexport enum UPDATE_PRIORITY\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    HIGH = 25,\n    NORMAL = 0,\n    LOW = -25,\n    UTILITY = -50,\n}\n","import type { TickerCallback } from './Ticker';\n\n/**\n * Internal class for handling the priority sorting of ticker handlers.\n * @private\n * @class\n * @memberof PIXI\n */\nexport class TickerListener<T = any>\n{\n    /** The current priority. */\n    public priority: number;\n    /** The next item in chain. */\n    public next: TickerListener = null;\n    /** The previous item in chain. */\n    public previous: TickerListener = null;\n\n    /** The handler function to execute. */\n    private fn: TickerCallback<T>;\n    /** The calling to execute. */\n    private context: T;\n    /** If this should only execute once. */\n    private once: boolean;\n    /** `true` if this listener has been destroyed already. */\n    private _destroyed = false;\n\n    /**\n     * Constructor\n     * @private\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @param priority - The priority for emitting\n     * @param once - If the handler should fire once\n     */\n    constructor(fn: TickerCallback<T>, context: T = null, priority = 0, once = false)\n    {\n        this.fn = fn;\n        this.context = context;\n        this.priority = priority;\n        this.once = once;\n    }\n\n    /**\n     * Simple compare function to figure out if a function and context match.\n     * @private\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @returns `true` if the listener match the arguments\n     */\n    match(fn: TickerCallback<T>, context: any = null): boolean\n    {\n        return this.fn === fn && this.context === context;\n    }\n\n    /**\n     * Emit by calling the current function.\n     * @private\n     * @param deltaTime - time since the last emit.\n     * @returns Next ticker\n     */\n    emit(deltaTime: number): TickerListener\n    {\n        if (this.fn)\n        {\n            if (this.context)\n            {\n                this.fn.call(this.context, deltaTime);\n            }\n            else\n            {\n                (this as TickerListener<any>).fn(deltaTime);\n            }\n        }\n\n        const redirect = this.next;\n\n        if (this.once)\n        {\n            this.destroy(true);\n        }\n\n        // Soft-destroying should remove\n        // the next reference\n        if (this._destroyed)\n        {\n            this.next = null;\n        }\n\n        return redirect;\n    }\n\n    /**\n     * Connect to the list.\n     * @private\n     * @param previous - Input node, previous listener\n     */\n    connect(previous: TickerListener): void\n    {\n        this.previous = previous;\n        if (previous.next)\n        {\n            previous.next.previous = this;\n        }\n        this.next = previous.next;\n        previous.next = this;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @private\n     * @param hard - `true` to remove the `next` reference, this\n     *        is considered a hard destroy. Soft destroy maintains the next reference.\n     * @returns The listener to redirect while emitting or removing.\n     */\n    destroy(hard = false): TickerListener\n    {\n        this._destroyed = true;\n        this.fn = null;\n        this.context = null;\n\n        // Disconnect, hook up next and previous\n        if (this.previous)\n        {\n            this.previous.next = this.next;\n        }\n\n        if (this.next)\n        {\n            this.next.previous = this.previous;\n        }\n\n        // Redirect to the next item\n        const redirect = this.next;\n\n        // Remove references\n        this.next = hard ? null : redirect;\n        this.previous = null;\n\n        return redirect;\n    }\n}\n","import { settings } from './settings';\nimport { UPDATE_PRIORITY } from './const';\nimport { TickerListener } from './TickerListener';\n\nexport type TickerCallback<T> = (this: T, dt: number) => any;\n\n/**\n * A Ticker class that runs an update loop that other objects listen to.\n *\n * This class is composed around listeners meant for execution on the next requested animation frame.\n * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.\n * @class\n * @memberof PIXI\n */\nexport class Ticker\n{\n    /** The private shared ticker instance */\n    private static _shared: Ticker;\n    /** The private system ticker instance  */\n    private static _system: Ticker;\n\n    /**\n     * Whether or not this ticker should invoke the method\n     * {@link PIXI.Ticker#start} automatically\n     * when a listener is added.\n     */\n    public autoStart = false;\n    /**\n     * Scalar time value from last frame to this frame.\n     * This value is capped by setting {@link PIXI.Ticker#minFPS}\n     * and is scaled with {@link PIXI.Ticker#speed}.\n     * **Note:** The cap may be exceeded by scaling.\n     */\n    public deltaTime = 1;\n    /**\n     * Scaler time elapsed in milliseconds from last frame to this frame.\n     * This value is capped by setting {@link PIXI.Ticker#minFPS}\n     * and is scaled with {@link PIXI.Ticker#speed}.\n     * **Note:** The cap may be exceeded by scaling.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 µs.\n     * Defaults to target frame time\n     * @default 16.66\n     */\n    public deltaMS: number;\n    /**\n     * Time elapsed in milliseconds from last frame to this frame.\n     * Opposed to what the scalar {@link PIXI.Ticker#deltaTime}\n     * is based, this value is neither capped nor scaled.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 µs.\n     * Defaults to target frame time\n     * @default 16.66\n     */\n    public elapsedMS: number;\n    /**\n     * The last time {@link PIXI.Ticker#update} was invoked.\n     * This value is also reset internally outside of invoking\n     * update, but only when a new animation frame is requested.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 µs.\n     */\n    public lastTime = -1;\n    /**\n     * Factor of current {@link PIXI.Ticker#deltaTime}.\n     * @example\n     * // Scales ticker.deltaTime to what would be\n     * // the equivalent of approximately 120 FPS\n     * ticker.speed = 2;\n     */\n    public speed = 1;\n    /**\n     * Whether or not this ticker has been started.\n     * `true` if {@link PIXI.Ticker#start} has been called.\n     * `false` if {@link PIXI.Ticker#stop} has been called.\n     * While `false`, this value may change to `true` in the\n     * event of {@link PIXI.Ticker#autoStart} being `true`\n     * and a listener is added.\n     */\n    public started = false;\n\n    /** The first listener. All new listeners added are chained on this. */\n    private _head: TickerListener;\n    /** Internal current frame request ID */\n    private _requestId: number = null;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the maximum allowed milliseconds between updates.\n     */\n    private _maxElapsedMS = 100;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the minimum allowed milliseconds between updates.\n     */\n    private _minElapsedMS = 0;\n    /** If enabled, deleting is disabled.*/\n    private _protected = false;\n    /** The last time keyframe was executed. Maintains a relatively fixed interval with the previous value. */\n    private _lastFrame = -1;\n    /**\n     * Internal tick method bound to ticker instance.\n     * This is because in early 2015, Function.bind\n     * is still 60% slower in high performance scenarios.\n     * Also separating frame requests from update method\n     * so listeners may be called at any time and with\n     * any animation API, just invoke ticker.update(time).\n     * @param time - Time since last tick.\n     */\n    private _tick: (time: number) => any;\n\n    constructor()\n    {\n        this._head = new TickerListener(null, null, Infinity);\n        this.deltaMS = 1 / settings.TARGET_FPMS;\n        this.elapsedMS = 1 / settings.TARGET_FPMS;\n\n        this._tick = (time: number): void =>\n        {\n            this._requestId = null;\n\n            if (this.started)\n            {\n                // Invoke listeners now\n                this.update(time);\n                // Listener side effects may have modified ticker state.\n                if (this.started && this._requestId === null && this._head.next)\n                {\n                    this._requestId = requestAnimationFrame(this._tick);\n                }\n            }\n        };\n    }\n\n    /**\n     * Conditionally requests a new animation frame.\n     * If a frame has not already been requested, and if the internal\n     * emitter has listeners, a new frame is requested.\n     * @private\n     */\n    private _requestIfNeeded(): void\n    {\n        if (this._requestId === null && this._head.next)\n        {\n            // ensure callbacks get correct delta\n            this.lastTime = performance.now();\n            this._lastFrame = this.lastTime;\n            this._requestId = requestAnimationFrame(this._tick);\n        }\n    }\n\n    /**\n     * Conditionally cancels a pending animation frame.\n     * @private\n     */\n    private _cancelIfNeeded(): void\n    {\n        if (this._requestId !== null)\n        {\n            cancelAnimationFrame(this._requestId);\n            this._requestId = null;\n        }\n    }\n\n    /**\n     * Conditionally requests a new animation frame.\n     * If the ticker has been started it checks if a frame has not already\n     * been requested, and if the internal emitter has listeners. If these\n     * conditions are met, a new frame is requested. If the ticker has not\n     * been started, but autoStart is `true`, then the ticker starts now,\n     * and continues with the previous conditions to request a new frame.\n     * @private\n     */\n    private _startIfPossible(): void\n    {\n        if (this.started)\n        {\n            this._requestIfNeeded();\n        }\n        else if (this.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Register a handler for tick events. Calls continuously unless\n     * it is removed or the ticker is stopped.\n     * @param fn - The listener function to be added for updates\n     * @param context - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns This instance of a ticker\n     */\n    add<T = any>(fn: TickerCallback<T>, context?: T, priority = UPDATE_PRIORITY.NORMAL): this\n    {\n        return this._addListener(new TickerListener(fn, context, priority));\n    }\n\n    /**\n     * Add a handler for the tick event which is only execute once.\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns This instance of a ticker\n     */\n    addOnce<T = any>(fn: TickerCallback<T>, context?: T, priority = UPDATE_PRIORITY.NORMAL): this\n    {\n        return this._addListener(new TickerListener(fn, context, priority, true));\n    }\n\n    /**\n     * Internally adds the event handler so that it can be sorted by priority.\n     * Priority allows certain handler (user, AnimatedSprite, Interaction) to be run\n     * before the rendering.\n     * @private\n     * @param listener - Current listener being added.\n     * @returns This instance of a ticker\n     */\n    private _addListener(listener: TickerListener): this\n    {\n        // For attaching to head\n        let current = this._head.next;\n        let previous = this._head;\n\n        // Add the first item\n        if (!current)\n        {\n            listener.connect(previous);\n        }\n        else\n        {\n            // Go from highest to lowest priority\n            while (current)\n            {\n                if (listener.priority > current.priority)\n                {\n                    listener.connect(previous);\n                    break;\n                }\n                previous = current;\n                current = current.next;\n            }\n\n            // Not yet connected\n            if (!listener.previous)\n            {\n                listener.connect(previous);\n            }\n        }\n\n        this._startIfPossible();\n\n        return this;\n    }\n\n    /**\n     * Removes any handlers matching the function and context parameters.\n     * If no handlers are left after removing, then it cancels the animation frame.\n     * @param fn - The listener function to be removed\n     * @param context - The listener context to be removed\n     * @returns This instance of a ticker\n     */\n    remove<T = any>(fn: TickerCallback<T>, context?: T): this\n    {\n        let listener = this._head.next;\n\n        while (listener)\n        {\n            // We found a match, lets remove it\n            // no break to delete all possible matches\n            // incase a listener was added 2+ times\n            if (listener.match(fn, context))\n            {\n                listener = listener.destroy();\n            }\n            else\n            {\n                listener = listener.next;\n            }\n        }\n\n        if (!this._head.next)\n        {\n            this._cancelIfNeeded();\n        }\n\n        return this;\n    }\n\n    /**\n     * The number of listeners on this ticker, calculated by walking through linked list\n     * @readonly\n     * @member {number}\n     */\n    get count(): number\n    {\n        if (!this._head)\n        {\n            return 0;\n        }\n\n        let count = 0;\n        let current = this._head;\n\n        while ((current = current.next))\n        {\n            count++;\n        }\n\n        return count;\n    }\n\n    /** Starts the ticker. If the ticker has listeners a new animation frame is requested at this point. */\n    start(): void\n    {\n        if (!this.started)\n        {\n            this.started = true;\n            this._requestIfNeeded();\n        }\n    }\n\n    /** Stops the ticker. If the ticker has requested an animation frame it is canceled at this point. */\n    stop(): void\n    {\n        if (this.started)\n        {\n            this.started = false;\n            this._cancelIfNeeded();\n        }\n    }\n\n    /** Destroy the ticker and don't use after this. Calling this method removes all references to internal events. */\n    destroy(): void\n    {\n        if (!this._protected)\n        {\n            this.stop();\n\n            let listener = this._head.next;\n\n            while (listener)\n            {\n                listener = listener.destroy(true);\n            }\n\n            this._head.destroy();\n            this._head = null;\n        }\n    }\n\n    /**\n     * Triggers an update. An update entails setting the\n     * current {@link PIXI.Ticker#elapsedMS},\n     * the current {@link PIXI.Ticker#deltaTime},\n     * invoking all listeners with current deltaTime,\n     * and then finally setting {@link PIXI.Ticker#lastTime}\n     * with the value of currentTime that was provided.\n     * This method will be called automatically by animation\n     * frame callbacks if the ticker instance has been started\n     * and listeners are added.\n     * @param {number} [currentTime=performance.now()] - the current time of execution\n     */\n    update(currentTime = performance.now()): void\n    {\n        let elapsedMS;\n\n        // If the difference in time is zero or negative, we ignore most of the work done here.\n        // If there is no valid difference, then should be no reason to let anyone know about it.\n        // A zero delta, is exactly that, nothing should update.\n        //\n        // The difference in time can be negative, and no this does not mean time traveling.\n        // This can be the result of a race condition between when an animation frame is requested\n        // on the current JavaScript engine event loop, and when the ticker's start method is invoked\n        // (which invokes the internal _requestIfNeeded method). If a frame is requested before\n        // _requestIfNeeded is invoked, then the callback for the animation frame the ticker requests,\n        // can receive a time argument that can be less than the lastTime value that was set within\n        // _requestIfNeeded. This difference is in microseconds, but this is enough to cause problems.\n        //\n        // This check covers this browser engine timing issue, as well as if consumers pass an invalid\n        // currentTime value. This may happen if consumers opt-out of the autoStart, and update themselves.\n\n        if (currentTime > this.lastTime)\n        {\n            // Save uncapped elapsedMS for measurement\n            elapsedMS = this.elapsedMS = currentTime - this.lastTime;\n\n            // cap the milliseconds elapsed used for deltaTime\n            if (elapsedMS > this._maxElapsedMS)\n            {\n                elapsedMS = this._maxElapsedMS;\n            }\n\n            elapsedMS *= this.speed;\n\n            // If not enough time has passed, exit the function.\n            // Get ready for next frame by setting _lastFrame, but based on _minElapsedMS\n            // adjustment to ensure a relatively stable interval.\n            if (this._minElapsedMS)\n            {\n                const delta = currentTime - this._lastFrame | 0;\n\n                if (delta < this._minElapsedMS)\n                {\n                    return;\n                }\n\n                this._lastFrame = currentTime - (delta % this._minElapsedMS);\n            }\n\n            this.deltaMS = elapsedMS;\n            this.deltaTime = this.deltaMS * settings.TARGET_FPMS;\n\n            // Cache a local reference, in-case ticker is destroyed\n            // during the emit, we can still check for head.next\n            const head = this._head;\n\n            // Invoke listeners added to internal emitter\n            let listener = head.next;\n\n            while (listener)\n            {\n                listener = listener.emit(this.deltaTime);\n            }\n\n            if (!head.next)\n            {\n                this._cancelIfNeeded();\n            }\n        }\n        else\n        {\n            this.deltaTime = this.deltaMS = this.elapsedMS = 0;\n        }\n\n        this.lastTime = currentTime;\n    }\n\n    /**\n     * The frames per second at which this ticker is running.\n     * The default is approximately 60 in most modern browsers.\n     * **Note:** This does not factor in the value of\n     * {@link PIXI.Ticker#speed}, which is specific\n     * to scaling {@link PIXI.Ticker#deltaTime}.\n     * @member {number}\n     * @readonly\n     */\n    get FPS(): number\n    {\n        return 1000 / this.elapsedMS;\n    }\n\n    /**\n     * Manages the maximum amount of milliseconds allowed to\n     * elapse between invoking {@link PIXI.Ticker#update}.\n     * This value is used to cap {@link PIXI.Ticker#deltaTime},\n     * but does not effect the measured value of {@link PIXI.Ticker#FPS}.\n     * When setting this property it is clamped to a value between\n     * `0` and `PIXI.settings.TARGET_FPMS * 1000`.\n     * @member {number}\n     * @default 10\n     */\n    get minFPS(): number\n    {\n        return 1000 / this._maxElapsedMS;\n    }\n\n    set minFPS(fps: number)\n    {\n        // Minimum must be below the maxFPS\n        const minFPS = Math.min(this.maxFPS, fps);\n\n        // Must be at least 0, but below 1 / settings.TARGET_FPMS\n        const minFPMS = Math.min(Math.max(0, minFPS) / 1000, settings.TARGET_FPMS);\n\n        this._maxElapsedMS = 1 / minFPMS;\n    }\n\n    /**\n     * Manages the minimum amount of milliseconds required to\n     * elapse between invoking {@link PIXI.Ticker#update}.\n     * This will effect the measured value of {@link PIXI.Ticker#FPS}.\n     * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.\n     * Otherwise it will be at least `minFPS`\n     * @member {number}\n     * @default 0\n     */\n    get maxFPS(): number\n    {\n        if (this._minElapsedMS)\n        {\n            return Math.round(1000 / this._minElapsedMS);\n        }\n\n        return 0;\n    }\n\n    set maxFPS(fps: number)\n    {\n        if (fps === 0)\n        {\n            this._minElapsedMS = 0;\n        }\n        else\n        {\n            // Max must be at least the minFPS\n            const maxFPS = Math.max(this.minFPS, fps);\n\n            this._minElapsedMS = 1 / (maxFPS / 1000);\n        }\n    }\n\n    /**\n     * The shared ticker instance used by {@link PIXI.AnimatedSprite} and by\n     * {@link PIXI.VideoResource} to update animation frames / video textures.\n     *\n     * It may also be used by {@link PIXI.Application} if created with the `sharedTicker` option property set to true.\n     *\n     * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n     * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.\n     * @example\n     * import { Ticker } from 'pixi.js';\n     *\n     * const ticker = Ticker.shared;\n     * // Set this to prevent starting this ticker when listeners are added.\n     * // By default this is true only for the PIXI.Ticker.shared instance.\n     * ticker.autoStart = false;\n     *\n     * // FYI, call this to ensure the ticker is stopped. It should be stopped\n     * // if you have not attempted to render anything yet.\n     * ticker.stop();\n     *\n     * // Call this when you are ready for a running shared ticker.\n     * ticker.start();\n     * @example\n     * import { autoDetectRenderer, Container } from 'pixi.js';\n     *\n     * // You may use the shared ticker to render...\n     * const renderer = autoDetectRenderer();\n     * const stage = new Container();\n     * document.body.appendChild(renderer.view);\n     * ticker.add((time) => renderer.render(stage));\n     * @example\n     * // Or you can just update it manually.\n     * ticker.autoStart = false;\n     * ticker.stop();\n     * const animate = (time) => {\n     *     ticker.update(time);\n     *     renderer.render(stage);\n     *     requestAnimationFrame(animate);\n     * };\n     * animate(performance.now());\n     * @member {PIXI.Ticker}\n     * @static\n     */\n    static get shared(): Ticker\n    {\n        if (!Ticker._shared)\n        {\n            const shared = Ticker._shared = new Ticker();\n\n            shared.autoStart = true;\n            shared._protected = true;\n        }\n\n        return Ticker._shared;\n    }\n\n    /**\n     * The system ticker instance used by {@link PIXI.BasePrepare} for core timing\n     * functionality that shouldn't usually need to be paused, unlike the `shared`\n     * ticker which drives visual animations and rendering which may want to be paused.\n     *\n     * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n     * @member {PIXI.Ticker}\n     * @static\n     */\n    static get system(): Ticker\n    {\n        if (!Ticker._system)\n        {\n            const system = Ticker._system = new Ticker();\n\n            system.autoStart = true;\n            system._protected = true;\n        }\n\n        return Ticker._system;\n    }\n}\n","import type { ExtensionMetadata } from '@pixi/extensions';\nimport { extensions, ExtensionType } from '@pixi/extensions';\nimport { UPDATE_PRIORITY } from './const';\nimport { Ticker } from './Ticker';\n\n/**\n * Middleware for for Application Ticker.\n * @class\n * @memberof PIXI\n */\nexport class TickerPlugin\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = ExtensionType.Application;\n\n    static start: () => void;\n    static stop: () => void;\n    static _ticker: Ticker;\n    static ticker: Ticker;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    static init(options?: GlobalMixins.IApplicationOptions): void\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        /**\n         * Convenience method for stopping the render.\n         * @method\n         * @memberof PIXI.Application\n         * @instance\n         */\n        this.stop = (): void =>\n        {\n            this._ticker.stop();\n        };\n\n        /**\n         * Convenience method for starting the render.\n         * @method\n         * @memberof PIXI.Application\n         * @instance\n         */\n        this.start = (): void =>\n        {\n            this._ticker.start();\n        };\n\n        /**\n         * Internal reference to the ticker.\n         * @type {PIXI.Ticker}\n         * @name _ticker\n         * @memberof PIXI.Application#\n         * @private\n         */\n        this._ticker = null;\n\n        /**\n         * Ticker for doing render updates.\n         * @type {PIXI.Ticker}\n         * @name ticker\n         * @memberof PIXI.Application#\n         * @default PIXI.Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     * @static\n     * @private\n     */\n    static destroy(): void\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n\nextensions.add(TickerPlugin);\n"],"names":["t","r","i","d","a","e","s"],"mappings":"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"}