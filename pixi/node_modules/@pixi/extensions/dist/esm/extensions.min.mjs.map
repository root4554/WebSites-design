{"version":3,"file":"extensions.min.mjs","sources":["../../src/index.ts"],"sourcesContent":["/**\n * Collection of valid extension types.\n * @memberof PIXI\n * @property {string} Application - Application plugins\n * @property {string} RendererPlugin - Plugins for Renderer\n * @property {string} CanvasRendererPlugin - Plugins for CanvasRenderer\n * @property {string} Loader - Plugins to use with Loader\n * @property {string} LoadParser - Parsers for Assets loader.\n * @property {string} ResolveParser - Parsers for Assets resolvers.\n * @property {string} CacheParser - Parsers for Assets cache.\n */\nenum ExtensionType\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    Renderer = 'renderer',\n    Application = 'application',\n    RendererSystem = 'renderer-webgl-system',\n    RendererPlugin = 'renderer-webgl-plugin',\n    CanvasRendererSystem = 'renderer-canvas-system',\n    CanvasRendererPlugin = 'renderer-canvas-plugin',\n    Asset = 'asset',\n    LoadParser = 'load-parser',\n    ResolveParser = 'resolve-parser',\n    CacheParser = 'cache-parser',\n    DetectionParser = 'detection-parser',\n}\n\ninterface ExtensionMetadataDetails\n{\n    type: ExtensionType | ExtensionType[];\n    name?: string;\n    priority?: number;\n}\n\ntype ExtensionMetadata = ExtensionType | ExtensionMetadataDetails;\n\n/**\n * Format when registering an extension. Generally, the extension\n * should have these values as `extension` static property,\n * but you can override name or type by providing an object.\n * @memberof PIXI\n */\ninterface ExtensionFormatLoose\n{\n    /** The extension type, can be multiple types */\n    type: ExtensionType | ExtensionType[];\n    /** Optional. Some plugins provide an API name/property, such as Renderer plugins */\n    name?: string;\n    /** Optional, used for sorting the plugins in a particular order */\n    priority?: number;\n    /** Reference to the plugin object/class */\n    ref: any;\n}\n\n/**\n * Strict extension format that is used internally for registrations.\n * @memberof PIXI\n */\ninterface ExtensionFormat extends ExtensionFormatLoose\n{\n    /** The extension type, always expressed as multiple, even if a single */\n    type: ExtensionType[];\n}\n\ntype ExtensionHandler = (extension: ExtensionFormat) => void;\n\n/**\n * Convert input into extension format data.\n * @ignore\n */\nconst normalizeExtension = (ext: ExtensionFormatLoose | any): ExtensionFormat =>\n{\n    // Class/Object submission, use extension object\n    if (typeof ext === 'function' || (typeof ext === 'object' && ext.extension))\n    {\n        // #if _DEBUG\n        if (!ext.extension)\n        {\n            throw new Error('Extension class must have an extension object');\n        }\n        // #endif\n        const metadata: ExtensionMetadataDetails = (typeof ext.extension !== 'object')\n            ? { type: ext.extension }\n            : ext.extension;\n\n        ext = { ...metadata, ref: ext };\n    }\n    if (typeof ext === 'object')\n    {\n        ext = { ...ext };\n    }\n    else\n    {\n        throw new Error('Invalid extension type');\n    }\n\n    if (typeof ext.type === 'string')\n    {\n        ext.type = [ext.type];\n    }\n\n    return ext;\n};\n\n/**\n * Global registration of all PixiJS extensions. One-stop-shop for extensibility.\n * @memberof PIXI\n * @namespace extensions\n */\nconst extensions = {\n\n    /** @ignore */\n    _addHandlers: {} as Record<ExtensionType, ExtensionHandler>,\n\n    /** @ignore */\n    _removeHandlers: {} as Record<ExtensionType, ExtensionHandler>,\n\n    /** @ignore */\n    _queue: {} as Record<ExtensionType, ExtensionFormat[]>,\n\n    /**\n     * Remove extensions from PixiJS.\n     * @param extensions - Extensions to be removed.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    remove(...extensions: Array<ExtensionFormatLoose | any>)\n    {\n        extensions.map(normalizeExtension).forEach((ext) =>\n        {\n            ext.type.forEach((type) => this._removeHandlers[type]?.(ext));\n        });\n\n        return this;\n    },\n\n    /**\n     * Register new extensions with PixiJS.\n     * @param extensions - The spread of extensions to add to PixiJS.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    add(...extensions: Array<ExtensionFormatLoose | any>)\n    {\n        // Handle any extensions either passed as class w/ data or as data\n        extensions.map(normalizeExtension).forEach((ext) =>\n        {\n            ext.type.forEach((type) =>\n            {\n                const handlers = this._addHandlers;\n                const queue = this._queue;\n\n                if (!handlers[type])\n                {\n                    queue[type] = queue[type] || [];\n                    queue[type].push(ext);\n                }\n                else\n                {\n                    handlers[type](ext);\n                }\n            });\n        });\n\n        return this;\n    },\n\n    /**\n     * Internal method to handle extensions by name.\n     * @param type - The extension type.\n     * @param onAdd  - Function for handling when extensions are added/registered passes {@link PIXI.ExtensionFormat}.\n     * @param onRemove  - Function for handling when extensions are removed/unregistered passes {@link PIXI.ExtensionFormat}.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    handle(type: ExtensionType, onAdd: ExtensionHandler, onRemove: ExtensionHandler)\n    {\n        const addHandlers = this._addHandlers;\n        const removeHandlers = this._removeHandlers;\n\n        // #if _DEBUG\n        if (addHandlers[type] || removeHandlers[type])\n        {\n            throw new Error(`Extension type ${type} already has a handler`);\n        }\n        // #endif\n\n        addHandlers[type] = onAdd;\n        removeHandlers[type] = onRemove;\n\n        // Process the queue\n        const queue = this._queue;\n\n        // Process any plugins that have been registered before the handler\n        if (queue[type])\n        {\n            queue[type].forEach((ext) => onAdd(ext));\n            delete queue[type];\n        }\n\n        return this;\n    },\n\n    /**\n     * Handle a type, but using a map by `name` property.\n     * @param type - Type of extension to handle.\n     * @param map - The object map of named extensions.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    handleByMap(type: ExtensionType, map: Record<string, any>)\n    {\n        return this.handle(type,\n            (extension) =>\n            {\n                map[extension.name] = extension.ref;\n            },\n            (extension) =>\n            {\n                delete map[extension.name];\n            }\n        );\n    },\n\n    /**\n     * Handle a type, but using a list of extensions.\n     * @param type - Type of extension to handle.\n     * @param list - The list of extensions.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    handleByList(type: ExtensionType, list: any[])\n    {\n        return this.handle(\n            type,\n            (extension) =>\n            {\n                list.push(extension.ref);\n                list.sort((a, b) => (b.priority ?? -1) - (a.priority ?? -1));\n            },\n            (extension) =>\n            {\n                const index = list.indexOf(extension.ref);\n\n                if (index !== -1)\n                {\n                    list.splice(index, 1);\n                }\n            }\n        );\n    },\n};\n\nexport {\n    extensions,\n    ExtensionType,\n};\nexport type {\n    ExtensionHandler,\n    ExtensionMetadata,\n    ExtensionFormatLoose,\n    ExtensionFormat,\n};\n"],"names":[],"mappings":";;;;;;;AAWK,IAAL,CAAA,CAAA,CAAK,CAGD,GAAA,CAAA,CAAA,QAAA,CAAW,WACX,CAAc,CAAA,WAAA,CAAA,aAAA,CACd,CAAiB,CAAA,cAAA,CAAA,uBAAA,CACjB,CAAiB,CAAA,cAAA,CAAA,uBAAA,CACjB,CAAuB,CAAA,oBAAA,CAAA,wBAAA,CACvB,uBAAuB,wBACvB,CAAA,CAAA,CAAA,KAAA,CAAQ,OACR,CAAA,CAAA,CAAA,UAAA,CAAa,aACb,CAAA,CAAA,CAAA,aAAA,CAAgB,gBAChB,CAAA,CAAA,CAAA,WAAA,CAAc,eACd,CAAkB,CAAA,eAAA,CAAA,kBAAA,CAbjB,CA2DL,CAAA,EAAA,CAAA,EAAA,EAAA,EAAM,MAAqB,CAAA,CAAC,CAC5B,EAAA,CAgBI,GAdI,CAAO,OAAA,CAAA,EAAQ,UAAe,EAAA,OAAe,CAAA,EAAA,QAAA,EAAY,CAAI,CAAA,SAAA,MAYvD,CAAE,GAJoC,OAAO,CAAA,CAAI,SAAc,EAAA,QAAA,CAC/D,CAAE,IAAA,CAAM,EAAI,SAAU,CAAA,CACtB,CAAI,CAAA,SAAA,CAEW,GAAK,CAAA,CAAI,CAE9B,CAAA,CAAA,UAAe,QAEf,CAAA,CAAA,CAAM,CAAE,GAAG,CAAI,CAAA,CAAA,KAIT,MAAA,UAAU,wBAAwB,CAAA,CAG5C,OAAI,OAAW,CAAA,CAAA,IAAA,EAAS,QAEpB,GAAA,CAAA,CAAI,KAAO,CAAC,CAAA,CAAI,IAAI,CAAA,CAAA,CAGjB,CACX,CAAA,CAOM,CAAa,CAAA,CAGf,aAAc,EAAC,CAGf,eAAiB,CAAA,EAGjB,CAAA,MAAA,CAAQ,EAAC,CAOT,UAAU,CACV,CAAA,CACI,OAAW,CAAA,CAAA,GAAA,CAAI,CAAkB,CAAA,CAAE,OAAQ,CAAC,GAC5C,CACI,CAAA,CAAI,IAAK,CAAA,OAAA,CAAQ,CAAC,EAAS,IAAK,CAAA,eAAA,CAAgB,KAAQ,CAAG,CAAC,EAChE,CAAC,CAEM,CAAA,IACX,CAOA,CAAA,GAAA,CAAA,GAAO,EACP,CAEI,OAAA,CAAA,CAAW,GAAI,CAAA,CAAkB,CAAE,CAAA,OAAA,CAAQ,CAAC,EAC5C,CACI,CAAI,CAAA,IAAA,CAAK,OAAQ,CAAC,CAClB,EAAA,CACI,MAAM,CAAA,CAAW,KAAK,YAChB,CAAA,CAAA,CAAQ,IAAK,CAAA,MAAA,CAEnB,CAAK,CAAS,CAOV,CAAA,CAAA,CAAA,CAAS,GAAM,CAAG,CAAA,EALZ,CAAA,CAAA,CAAA,CAAA,CAAQ,CAAM,CAAA,CAAA,CAAA,EAAS,EAAC,CAC9B,EAAM,CAAM,CAAA,CAAA,IAAA,CAAK,CAAG,CAAA,EAM5B,CAAC,EACL,CAAC,CAAA,CAEM,IACX,CASA,CAAA,MAAA,CAAO,CAAqB,CAAA,CAAA,CAAyB,CACrD,CAAA,CACI,MAAM,CAAA,CAAc,KAAK,YACnB,CAAA,CAAA,CAAiB,IAAK,CAAA,eAAA,CAS5B,CAAY,CAAA,CAAA,CAAA,CAAQ,CACpB,CAAA,CAAA,CAAe,GAAQ,CAGvB,CAAA,MAAc,CAAA,CAAA,IAAA,CAAK,MAGnB,CAAA,OAAU,CAAA,CAAA,CAAA,CAAA,KAEA,CAAM,CAAA,CAAA,OAAA,CAAQ,CAAC,EAAQ,CAAM,CAAA,CAAG,CAAC,CAAA,CACvC,OAAa,CAAA,CAAA,CAAA,CAAA,CAAA,CAGV,IACX,CAAA,CAQA,WAAY,CAAA,CAAA,CAAqB,CACjC,CAAA,CACI,OAAY,IAAA,CAAA,MAAA,CAAO,CACf,CAAC,CACD,EAAA,CACI,CAAI,CAAA,CAAA,CAAU,MAAQ,CAAU,CAAA,IACpC,CACA,CAAC,CACD,EAAA,CACI,OAAO,CAAA,CAAI,EAAU,IACzB,EAAA,CACJ,CACJ,CAAA,CAQA,YAAa,CAAA,CAAA,CAAqB,CAClC,CAAA,CACI,OAAY,IAAA,CAAA,MAAA,CACR,CACA,CAAC,CACD,EAAA,CACI,CAAK,CAAA,IAAA,CAAK,EAAU,GAAG,CAAA,CACvB,CAAK,CAAA,IAAA,CAAK,CAAC,CAAA,CAAG,CAAO,GAAA,CAAA,CAAA,CAAE,UAAY,CAAO,CAAA,GAAA,CAAA,CAAE,QAAY,EAAA,CAAA,CAAA,CAAG,EAC/D,CAAA,CACA,CAAC,EACD,CACI,MAAM,CAAA,CAAQ,CAAK,CAAA,OAAA,CAAQ,CAAU,CAAA,GAAG,CAExC,CAAI,IAAU,CAEV,CAAA,EAAA,CAAA,CAAK,MAAO,CAAA,CAAA,CAAO,CAAC,EAE5B,CACJ,CACJ,CACJ;;;;"}